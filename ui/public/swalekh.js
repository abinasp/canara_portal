var SwalekhWeb=function(o){"use strict";var e;o=o&&o.hasOwnProperty("default")?o.default:o,e=function(k){k.ui=k.ui||{};k.ui.version="1.12.1";var o,i=0,r=Array.prototype.slice;k.cleanData=(o=k.cleanData,function(e){var t,i,n;for(n=0;null!=(i=e[n]);n++)try{(t=k._data(i,"events"))&&t.remove&&k(i).triggerHandler("remove")}catch(e){}o(e)}),k.widget=function(e,i,t){var n,o,s,a={},r=e.split(".")[0],l=r+"-"+(e=e.split(".")[1]);return t||(t=i,i=k.Widget),k.isArray(t)&&(t=k.extend.apply(null,[{}].concat(t))),k.expr[":"][l.toLowerCase()]=function(e){return!!k.data(e,l)},k[r]=k[r]||{},n=k[r][e],o=k[r][e]=function(e,t){if(!this._createWidget)return new o(e,t);arguments.length&&this._createWidget(e,t)},k.extend(o,n,{version:t.version,_proto:k.extend({},t),_childConstructors:[]}),(s=new i).options=k.widget.extend({},s.options),k.each(t,function(t,n){function o(){return i.prototype[t].apply(this,arguments)}function s(e){return i.prototype[t].apply(this,e)}k.isFunction(n)?a[t]=function(){var e,t=this._super,i=this._superApply;return this._super=o,this._superApply=s,e=n.apply(this,arguments),this._super=t,this._superApply=i,e}:a[t]=n}),o.prototype=k.widget.extend(s,{widgetEventPrefix:n&&s.widgetEventPrefix||e},a,{constructor:o,namespace:r,widgetName:e,widgetFullName:l}),n?(k.each(n._childConstructors,function(e,t){var i=t.prototype;k.widget(i.namespace+"."+i.widgetName,o,t._proto)}),delete n._childConstructors):i._childConstructors.push(o),k.widget.bridge(e,o),o},k.widget.extend=function(e){for(var t,i,n=r.call(arguments,1),o=0,s=n.length;o<s;o++)for(t in n[o])i=n[o][t],n[o].hasOwnProperty(t)&&void 0!==i&&(k.isPlainObject(i)?e[t]=k.isPlainObject(e[t])?k.widget.extend({},e[t],i):k.widget.extend({},i):e[t]=i);return e},k.widget.bridge=function(s,t){var a=t.prototype.widgetFullName||s;k.fn[s]=function(i){var e="string"==typeof i,n=r.call(arguments,1),o=this;return e?this.length||"instance"!==i?this.each(function(){var e,t=k.data(this,a);return"instance"===i?(o=t,!1):t?k.isFunction(t[i])&&"_"!==i.charAt(0)?(e=t[i].apply(t,n))!==t&&void 0!==e?(o=e&&e.jquery?o.pushStack(e.get()):e,!1):void 0:k.error("no such method '"+i+"' for "+s+" widget instance"):k.error("cannot call methods on "+s+" prior to initialization; attempted to call method '"+i+"'")}):o=void 0:(n.length&&(i=k.widget.extend.apply(null,[i].concat(n))),this.each(function(){var e=k.data(this,a);e?(e.option(i||{}),e._init&&e._init()):k.data(this,a,new t(i,this))})),o}},k.Widget=function(){},k.Widget._childConstructors=[],k.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(e,t){t=k(t||this.defaultElement||this)[0],this.element=k(t),this.uuid=i++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=k(),this.hoverable=k(),this.focusable=k(),this.classesElementLookup={},t!==this&&(k.data(t,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===t&&this.destroy()}}),this.document=k(t.style?t.ownerDocument:t.document||t),this.window=k(this.document[0].defaultView||this.document[0].parentWindow)),this.options=k.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:k.noop,_create:k.noop,_init:k.noop,destroy:function(){var i=this;this._destroy(),k.each(this.classesElementLookup,function(e,t){i._removeClass(t,e)}),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:k.noop,widget:function(){return this.element},option:function(e,t){var i,n,o,s=e;if(0===arguments.length)return k.widget.extend({},this.options);if("string"==typeof e)if(s={},e=(i=e.split(".")).shift(),i.length){for(n=s[e]=k.widget.extend({},this.options[e]),o=0;o<i.length-1;o++)n[i[o]]=n[i[o]]||{},n=n[i[o]];if(e=i.pop(),1===arguments.length)return void 0===n[e]?null:n[e];n[e]=t}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];s[e]=t}return this._setOptions(s),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return"classes"===e&&this._setOptionClasses(t),this.options[e]=t,"disabled"===e&&this._setOptionDisabled(t),this},_setOptionClasses:function(e){var t,i,n;for(t in e)n=this.classesElementLookup[t],e[t]!==this.options.classes[t]&&n&&n.length&&(i=k(n.get()),this._removeClass(n,t),i.addClass(this._classes({element:i,keys:t,classes:e,add:!0})))},_setOptionDisabled:function(e){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!e),e&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(o){var s=[],a=this;function e(e,t){var i,n;for(n=0;n<e.length;n++)i=a.classesElementLookup[e[n]]||k(),i=o.add?k(k.unique(i.get().concat(o.element.get()))):k(i.not(o.element).get()),a.classesElementLookup[e[n]]=i,s.push(e[n]),t&&o.classes[e[n]]&&s.push(o.classes[e[n]])}return o=k.extend({element:this.element,classes:this.options.classes||{}},o),this._on(o.element,{remove:"_untrackClassesElement"}),o.keys&&e(o.keys.match(/\S+/g)||[],!0),o.extra&&e(o.extra.match(/\S+/g)||[]),s.join(" ")},_untrackClassesElement:function(i){var n=this;k.each(n.classesElementLookup,function(e,t){-1!==k.inArray(i.target,t)&&(n.classesElementLookup[e]=k(t.not(i.target).get()))})},_removeClass:function(e,t,i){return this._toggleClass(e,t,i,!1)},_addClass:function(e,t,i){return this._toggleClass(e,t,i,!0)},_toggleClass:function(e,t,i,n){n="boolean"==typeof n?n:i;var o="string"==typeof e||null===e,s={extra:o?t:i,keys:o?e:t,element:o?this.element:e,add:n};return s.element.toggleClass(this._classes(s),n),this},_on:function(a,r,e){var l,c=this;"boolean"!=typeof a&&(e=r,r=a,a=!1),e?(r=l=k(r),this.bindings=this.bindings.add(r)):(e=r,r=this.element,l=this.widget()),k.each(e,function(e,t){function i(){if(a||!0!==c.options.disabled&&!k(this).hasClass("ui-state-disabled"))return("string"==typeof t?c[t]:t).apply(c,arguments)}"string"!=typeof t&&(i.guid=t.guid=t.guid||i.guid||k.guid++);var n=e.match(/^([\w:-]*)\s*(.*)$/),o=n[1]+c.eventNamespace,s=n[2];s?l.on(o,s,i):r.on(o,i)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.off(t).off(t),this.bindings=k(this.bindings.not(e).get()),this.focusable=k(this.focusable.not(e).get()),this.hoverable=k(this.hoverable.not(e).get())},_delay:function(e,t){var i=this;return setTimeout(function(){return("string"==typeof e?i[e]:e).apply(i,arguments)},t||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){this._addClass(k(e.currentTarget),null,"ui-state-hover")},mouseleave:function(e){this._removeClass(k(e.currentTarget),null,"ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){this._addClass(k(e.currentTarget),null,"ui-state-focus")},focusout:function(e){this._removeClass(k(e.currentTarget),null,"ui-state-focus")}})},_trigger:function(e,t,i){var n,o,s=this.options[e];if(i=i||{},(t=k.Event(t)).type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),t.target=this.element[0],o=t.originalEvent)for(n in o)n in t||(t[n]=o[n]);return this.element.trigger(t,i),!(k.isFunction(s)&&!1===s.apply(this.element[0],[t].concat(i))||t.isDefaultPrevented())}},k.each({show:"fadeIn",hide:"fadeOut"},function(s,a){k.Widget.prototype["_"+s]=function(t,e,i){var n;"string"==typeof e&&(e={effect:e});var o=e?!0===e||"number"==typeof e?a:e.effect||a:s;"number"==typeof(e=e||{})&&(e={duration:e}),n=!k.isEmptyObject(e),e.complete=i,e.delay&&t.delay(e.delay),n&&k.effects&&k.effects.effect[o]?t[s](e):o!==s&&t[o]?t[o](e.duration,e.easing,i):t.queue(function(e){k(this)[s](),i&&i.call(t[0]),e()})}});var s,C,x,n,a,l,c,d,t;k.widget;function _(e,t,i){return[parseFloat(e[0])*(d.test(e[0])?t/100:1),parseFloat(e[1])*(d.test(e[1])?i/100:1)]}function E(e,t){return parseInt(k.css(e,t),10)||0}C=Math.max,x=Math.abs,n=/left|center|right/,a=/top|center|bottom/,l=/[\+\-]\d+(\.[\d]+)?%?/,c=/^\w+/,d=/%$/,t=k.fn.position,k.position={scrollbarWidth:function(){if(void 0!==s)return s;var e,t,i=k("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),n=i.children()[0];return k("body").append(i),e=n.offsetWidth,i.css("overflow","scroll"),e===(t=n.offsetWidth)&&(t=i[0].clientWidth),i.remove(),s=e-t},getScrollInfo:function(e){var t=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),i=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),n="scroll"===t||"auto"===t&&e.width<e.element[0].scrollWidth;return{width:"scroll"===i||"auto"===i&&e.height<e.element[0].scrollHeight?k.position.scrollbarWidth():0,height:n?k.position.scrollbarWidth():0}},getWithinInfo:function(e){var t=k(e||window),i=k.isWindow(t[0]),n=!!t[0]&&9===t[0].nodeType;return{element:t,isWindow:i,isDocument:n,offset:i||n?{left:0,top:0}:k(e).offset(),scrollLeft:t.scrollLeft(),scrollTop:t.scrollTop(),width:t.outerWidth(),height:t.outerHeight()}}},k.fn.position=function(p){if(!p||!p.of)return t.apply(this,arguments);p=k.extend({},p);var h,u,A,f,g,e,m=k(p.of),y=k.position.getWithinInfo(p.within),b=k.position.getScrollInfo(y),v=(p.collision||"flip").split(" "),w={};return e=function(e){var t=e[0];return 9===t.nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:k.isWindow(t)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:t.preventDefault?{width:0,height:0,offset:{top:t.pageY,left:t.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()}}(m),m[0].preventDefault&&(p.at="left top"),u=e.width,A=e.height,f=e.offset,g=k.extend({},f),k.each(["my","at"],function(){var e,t,i=(p[this]||"").split(" ");1===i.length&&(i=n.test(i[0])?i.concat(["center"]):a.test(i[0])?["center"].concat(i):["center","center"]),i[0]=n.test(i[0])?i[0]:"center",i[1]=a.test(i[1])?i[1]:"center",e=l.exec(i[0]),t=l.exec(i[1]),w[this]=[e?e[0]:0,t?t[0]:0],p[this]=[c.exec(i[0])[0],c.exec(i[1])[0]]}),1===v.length&&(v[1]=v[0]),"right"===p.at[0]?g.left+=u:"center"===p.at[0]&&(g.left+=u/2),"bottom"===p.at[1]?g.top+=A:"center"===p.at[1]&&(g.top+=A/2),h=_(w.at,u,A),g.left+=h[0],g.top+=h[1],this.each(function(){var i,e,a=k(this),r=a.outerWidth(),l=a.outerHeight(),t=E(this,"marginLeft"),n=E(this,"marginTop"),o=r+t+E(this,"marginRight")+b.width,s=l+n+E(this,"marginBottom")+b.height,c=k.extend({},g),d=_(w.my,a.outerWidth(),a.outerHeight());"right"===p.my[0]?c.left-=r:"center"===p.my[0]&&(c.left-=r/2),"bottom"===p.my[1]?c.top-=l:"center"===p.my[1]&&(c.top-=l/2),c.left+=d[0],c.top+=d[1],i={marginLeft:t,marginTop:n},k.each(["left","top"],function(e,t){k.ui.position[v[e]]&&k.ui.position[v[e]][t](c,{targetWidth:u,targetHeight:A,elemWidth:r,elemHeight:l,collisionPosition:i,collisionWidth:o,collisionHeight:s,offset:[h[0]+d[0],h[1]+d[1]],my:p.my,at:p.at,within:y,elem:a})}),p.using&&(e=function(e){var t=f.left-c.left,i=t+u-r,n=f.top-c.top,o=n+A-l,s={target:{element:m,left:f.left,top:f.top,width:u,height:A},element:{element:a,left:c.left,top:c.top,width:r,height:l},horizontal:i<0?"left":0<t?"right":"center",vertical:o<0?"top":0<n?"bottom":"middle"};u<r&&x(t+i)<u&&(s.horizontal="center"),A<l&&x(n+o)<A&&(s.vertical="middle"),C(x(t),x(i))>C(x(n),x(o))?s.important="horizontal":s.important="vertical",p.using.call(this,e,s)}),a.offset(k.extend(c,{using:e}))})},k.ui.position={fit:{left:function(e,t){var i,n=t.within,o=n.isWindow?n.scrollLeft:n.offset.left,s=n.width,a=e.left-t.collisionPosition.marginLeft,r=o-a,l=a+t.collisionWidth-s-o;t.collisionWidth>s?0<r&&l<=0?(i=e.left+r+t.collisionWidth-s-o,e.left+=r-i):e.left=0<l&&r<=0?o:l<r?o+s-t.collisionWidth:o:0<r?e.left+=r:0<l?e.left-=l:e.left=C(e.left-a,e.left)},top:function(e,t){var i,n=t.within,o=n.isWindow?n.scrollTop:n.offset.top,s=t.within.height,a=e.top-t.collisionPosition.marginTop,r=o-a,l=a+t.collisionHeight-s-o;t.collisionHeight>s?0<r&&l<=0?(i=e.top+r+t.collisionHeight-s-o,e.top+=r-i):e.top=0<l&&r<=0?o:l<r?o+s-t.collisionHeight:o:0<r?e.top+=r:0<l?e.top-=l:e.top=C(e.top-a,e.top)}},flip:{left:function(e,t){var i,n,o=t.within,s=o.offset.left+o.scrollLeft,a=o.width,r=o.isWindow?o.scrollLeft:o.offset.left,l=e.left-t.collisionPosition.marginLeft,c=l-r,d=l+t.collisionWidth-a-r,p="left"===t.my[0]?-t.elemWidth:"right"===t.my[0]?t.elemWidth:0,h="left"===t.at[0]?t.targetWidth:"right"===t.at[0]?-t.targetWidth:0,u=-2*t.offset[0];c<0?((i=e.left+p+h+u+t.collisionWidth-a-s)<0||i<x(c))&&(e.left+=p+h+u):0<d&&(0<(n=e.left-t.collisionPosition.marginLeft+p+h+u-r)||x(n)<d)&&(e.left+=p+h+u)},top:function(e,t){var i,n,o=t.within,s=o.offset.top+o.scrollTop,a=o.height,r=o.isWindow?o.scrollTop:o.offset.top,l=e.top-t.collisionPosition.marginTop,c=l-r,d=l+t.collisionHeight-a-r,p="top"===t.my[1],h=p?-t.elemHeight:"bottom"===t.my[1]?t.elemHeight:0,u="top"===t.at[1]?t.targetHeight:"bottom"===t.at[1]?-t.targetHeight:0,A=-2*t.offset[1];c<0?((n=e.top+h+u+A+t.collisionHeight-a-s)<0||n<x(c))&&(e.top+=h+u+A):0<d&&(0<(i=e.top-t.collisionPosition.marginTop+h+u+A-r)||x(i)<d)&&(e.top+=h+u+A)}},flipfit:{left:function(){k.ui.position.flip.left.apply(this,arguments),k.ui.position.fit.left.apply(this,arguments)},top:function(){k.ui.position.flip.top.apply(this,arguments),k.ui.position.fit.top.apply(this,arguments)}}};k.ui.position,k.extend(k.expr[":"],{data:k.expr.createPseudo?k.expr.createPseudo(function(t){return function(e){return!!k.data(e,t)}}):function(e,t,i){return!!k.data(e,i[3])}}),k.fn.scrollParent=function(e){var t=this.css("position"),i="absolute"===t,n=e?/(auto|scroll|hidden)/:/(auto|scroll)/,o=this.parents().filter(function(){var e=k(this);return(!i||"static"!==e.css("position"))&&n.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==t&&o.length?o:k(this[0].ownerDocument||document)},k.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var p=!1;k(document).on("mouseup",function(){p=!1});k.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.on("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).on("click."+this.widgetName,function(e){if(!0===k.data(e.target,t.widgetName+".preventClickEvent"))return k.removeData(e.target,t.widgetName+".preventClickEvent"),e.stopImmediatePropagation(),!1}),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if(!p){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var t=this,i=1===e.which,n=!("string"!=typeof this.options.cancel||!e.target.nodeName)&&k(e.target).closest(this.options.cancel).length;return!(i&&!n&&this._mouseCapture(e))||(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){t.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(e),!this._mouseStarted)?(e.preventDefault(),!0):(!0===k.data(e.target,this.widgetName+".preventClickEvent")&&k.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return t._mouseMove(e)},this._mouseUpDelegate=function(e){return t._mouseUp(e)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),p=!0))}},_mouseMove:function(e){if(this._mouseMoved){if(k.ui.ie&&(!document.documentMode||document.documentMode<9)&&!e.button)return this._mouseUp(e);if(!e.which)if(e.originalEvent.altKey||e.originalEvent.ctrlKey||e.originalEvent.metaKey||e.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(this._mouseDownEvent,e),this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&k.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,p=!1,e.preventDefault()},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),k.ui.plugin={add:function(e,t,i){var n,o=k.ui[e].prototype;for(n in i)o.plugins[n]=o.plugins[n]||[],o.plugins[n].push([t,i[n]])},call:function(e,t,i,n){var o,s=e.plugins[t];if(s&&(n||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(o=0;o<s.length;o++)e.options[s[o][0]]&&s[o][1].apply(e.element,i)}},k.ui.safeActiveElement=function(t){var i;try{i=t.activeElement}catch(e){i=t.body}return(i=i||t.body).nodeName||(i=t.body),i},k.ui.safeBlur=function(e){e&&"body"!==e.nodeName.toLowerCase()&&k(e).trigger("blur")};k.widget("ui.draggable",k.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(e,t){this._super(e,t),"handle"===e&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){(this.helper||this.element).is(".ui-draggable-dragging")?this.destroyOnClear=!0:(this._removeHandleClassName(),this._mouseDestroy())},_mouseCapture:function(e){var t=this.options;return!(this.helper||t.disabled||0<k(e.target).closest(".ui-resizable-handle").length)&&(this.handle=this._getHandle(e),!!this.handle&&(this._blurActiveElement(e),this._blockFrames(!0===t.iframeFix?"iframe":t.iframeFix),!0))},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map(function(){var e=k(this);return k("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var t=k.ui.safeActiveElement(this.document[0]);k(e.target).closest(t).length||k.ui.safeBlur(t)},_mouseStart:function(e){var t=this.options;return this.helper=this._createHelper(e),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),k.ui.ddmanager&&(k.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=0<this.helper.parents().filter(function(){return"fixed"===k(this).css("position")}).length,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,t.cursorAt&&this._adjustOffsetFromHelper(t.cursorAt),this._setContainment(),!1===this._trigger("start",e)?(this._clear(),!1):(this._cacheHelperProportions(),k.ui.ddmanager&&!t.dropBehaviour&&k.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),k.ui.ddmanager&&k.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(e){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:e.pageX-this.offset.left,top:e.pageY-this.offset.top}},_mouseDrag:function(e,t){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!t){var i=this._uiHash();if(!1===this._trigger("drag",e,i))return this._mouseUp(new k.Event("mouseup",e)),!1;this.position=i.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",k.ui.ddmanager&&k.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var t=this,i=!1;return k.ui.ddmanager&&!this.options.dropBehaviour&&(i=k.ui.ddmanager.drop(this,e)),this.dropped&&(i=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!i||"valid"===this.options.revert&&i||!0===this.options.revert||k.isFunction(this.options.revert)&&this.options.revert.call(this.element,i)?k(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){!1!==t._trigger("stop",e)&&t._clear()}):!1!==this._trigger("stop",e)&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),k.ui.ddmanager&&k.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.trigger("focus"),k.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new k.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(e){return!this.options.handle||!!k(e.target).closest(this.element.find(this.options.handle)).length},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(e){var t=this.options,i=k.isFunction(t.helper),n=i?k(t.helper.apply(this.element[0],[e])):"clone"===t.helper?this.element.clone().removeAttr("id"):this.element;return n.parents("body").length||n.appendTo("parent"===t.appendTo?this.element[0].parentNode:t.appendTo),i&&n[0]===this.element[0]&&this._setPositionRelative(),n[0]===this.element[0]||/(fixed|absolute)/.test(n.css("position"))||n.css("position","absolute"),n},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),k.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(e){return/(html|body)/i.test(e.tagName)||e===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),t=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==t&&k.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var e=this.element.position(),t=this._isRootNode(this.scrollParent[0]);return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+(t?0:this.scrollParent.scrollTop()),left:e.left-(parseInt(this.helper.css("left"),10)||0)+(t?0:this.scrollParent.scrollLeft())}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,t,i,n=this.options,o=this.document[0];this.relativeContainer=null,n.containment?"window"!==n.containment?"document"!==n.containment?n.containment.constructor!==Array?("parent"===n.containment&&(n.containment=this.helper[0].parentNode),(i=(t=k(n.containment))[0])&&(e=/(scroll|auto)/.test(t.css("overflow")),this.containment=[(parseInt(t.css("borderLeftWidth"),10)||0)+(parseInt(t.css("paddingLeft"),10)||0),(parseInt(t.css("borderTopWidth"),10)||0)+(parseInt(t.css("paddingTop"),10)||0),(e?Math.max(i.scrollWidth,i.offsetWidth):i.offsetWidth)-(parseInt(t.css("borderRightWidth"),10)||0)-(parseInt(t.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(i.scrollHeight,i.offsetHeight):i.offsetHeight)-(parseInt(t.css("borderBottomWidth"),10)||0)-(parseInt(t.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=t)):this.containment=n.containment:this.containment=[0,0,k(o).width()-this.helperProportions.width-this.margins.left,(k(o).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=[k(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,k(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,k(window).scrollLeft()+k(window).width()-this.helperProportions.width-this.margins.left,k(window).scrollTop()+(k(window).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=null},_convertPositionTo:function(e,t){t=t||this.position;var i="absolute"===e?1:-1,n=this._isRootNode(this.scrollParent[0]);return{top:t.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.offset.scroll.top:n?0:this.offset.scroll.top)*i,left:t.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.offset.scroll.left:n?0:this.offset.scroll.left)*i}},_generatePosition:function(e,t){var i,n,o,s,a=this.options,r=this._isRootNode(this.scrollParent[0]),l=e.pageX,c=e.pageY;return r&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),t&&(this.containment&&(i=this.relativeContainer?(n=this.relativeContainer.offset(),[this.containment[0]+n.left,this.containment[1]+n.top,this.containment[2]+n.left,this.containment[3]+n.top]):this.containment,e.pageX-this.offset.click.left<i[0]&&(l=i[0]+this.offset.click.left),e.pageY-this.offset.click.top<i[1]&&(c=i[1]+this.offset.click.top),e.pageX-this.offset.click.left>i[2]&&(l=i[2]+this.offset.click.left),e.pageY-this.offset.click.top>i[3]&&(c=i[3]+this.offset.click.top)),a.grid&&(o=a.grid[1]?this.originalPageY+Math.round((c-this.originalPageY)/a.grid[1])*a.grid[1]:this.originalPageY,c=i?o-this.offset.click.top>=i[1]||o-this.offset.click.top>i[3]?o:o-this.offset.click.top>=i[1]?o-a.grid[1]:o+a.grid[1]:o,s=a.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/a.grid[0])*a.grid[0]:this.originalPageX,l=i?s-this.offset.click.left>=i[0]||s-this.offset.click.left>i[2]?s:s-this.offset.click.left>=i[0]?s-a.grid[0]:s+a.grid[0]:s),"y"===a.axis&&(l=this.originalPageX),"x"===a.axis&&(c=this.originalPageY)),{top:c-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:r?0:this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:r?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(e,t,i){return i=i||this._uiHash(),k.ui.plugin.call(this,e,[t,i,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),i.offset=this.positionAbs),k.Widget.prototype._trigger.call(this,e,t,i)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),k.ui.plugin.add("draggable","connectToSortable",{start:function(t,e,i){var n=k.extend({},e,{item:i.element});i.sortables=[],k(i.options.connectToSortable).each(function(){var e=k(this).sortable("instance");e&&!e.options.disabled&&(i.sortables.push(e),e.refreshPositions(),e._trigger("activate",t,n))})},stop:function(t,e,i){var n=k.extend({},e,{item:i.element});i.cancelHelperRemoval=!1,k.each(i.sortables,function(){var e=this;e.isOver?(e.isOver=0,i.cancelHelperRemoval=!0,e.cancelHelperRemoval=!1,e._storedCSS={position:e.placeholder.css("position"),top:e.placeholder.css("top"),left:e.placeholder.css("left")},e._mouseStop(t),e.options.helper=e.options._helper):(e.cancelHelperRemoval=!0,e._trigger("deactivate",t,n))})},drag:function(i,n,o){k.each(o.sortables,function(){var e=!1,t=this;t.positionAbs=o.positionAbs,t.helperProportions=o.helperProportions,t.offset.click=o.offset.click,t._intersectsWith(t.containerCache)&&(e=!0,k.each(o.sortables,function(){return this.positionAbs=o.positionAbs,this.helperProportions=o.helperProportions,this.offset.click=o.offset.click,this!==t&&this._intersectsWith(this.containerCache)&&k.contains(t.element[0],this.element[0])&&(e=!1),e})),e?(t.isOver||(t.isOver=1,o._parent=n.helper.parent(),t.currentItem=n.helper.appendTo(t.element).data("ui-sortable-item",!0),t.options._helper=t.options.helper,t.options.helper=function(){return n.helper[0]},i.target=t.currentItem[0],t._mouseCapture(i,!0),t._mouseStart(i,!0,!0),t.offset.click.top=o.offset.click.top,t.offset.click.left=o.offset.click.left,t.offset.parent.left-=o.offset.parent.left-t.offset.parent.left,t.offset.parent.top-=o.offset.parent.top-t.offset.parent.top,o._trigger("toSortable",i),o.dropped=t.element,k.each(o.sortables,function(){this.refreshPositions()}),o.currentItem=o.element,t.fromOutside=o),t.currentItem&&(t._mouseDrag(i),n.position=t.position)):t.isOver&&(t.isOver=0,t.cancelHelperRemoval=!0,t.options._revert=t.options.revert,t.options.revert=!1,t._trigger("out",i,t._uiHash(t)),t._mouseStop(i,!0),t.options.revert=t.options._revert,t.options.helper=t.options._helper,t.placeholder&&t.placeholder.remove(),n.helper.appendTo(o._parent),o._refreshOffsets(i),n.position=o._generatePosition(i,!0),o._trigger("fromSortable",i),o.dropped=!1,k.each(o.sortables,function(){this.refreshPositions()}))})}}),k.ui.plugin.add("draggable","cursor",{start:function(e,t,i){var n=k("body"),o=i.options;n.css("cursor")&&(o._cursor=n.css("cursor")),n.css("cursor",o.cursor)},stop:function(e,t,i){var n=i.options;n._cursor&&k("body").css("cursor",n._cursor)}}),k.ui.plugin.add("draggable","opacity",{start:function(e,t,i){var n=k(t.helper),o=i.options;n.css("opacity")&&(o._opacity=n.css("opacity")),n.css("opacity",o.opacity)},stop:function(e,t,i){var n=i.options;n._opacity&&k(t.helper).css("opacity",n._opacity)}}),k.ui.plugin.add("draggable","scroll",{start:function(e,t,i){i.scrollParentNotHidden||(i.scrollParentNotHidden=i.helper.scrollParent(!1)),i.scrollParentNotHidden[0]!==i.document[0]&&"HTML"!==i.scrollParentNotHidden[0].tagName&&(i.overflowOffset=i.scrollParentNotHidden.offset())},drag:function(e,t,i){var n=i.options,o=!1,s=i.scrollParentNotHidden[0],a=i.document[0];s!==a&&"HTML"!==s.tagName?(n.axis&&"x"===n.axis||(i.overflowOffset.top+s.offsetHeight-e.pageY<n.scrollSensitivity?s.scrollTop=o=s.scrollTop+n.scrollSpeed:e.pageY-i.overflowOffset.top<n.scrollSensitivity&&(s.scrollTop=o=s.scrollTop-n.scrollSpeed)),n.axis&&"y"===n.axis||(i.overflowOffset.left+s.offsetWidth-e.pageX<n.scrollSensitivity?s.scrollLeft=o=s.scrollLeft+n.scrollSpeed:e.pageX-i.overflowOffset.left<n.scrollSensitivity&&(s.scrollLeft=o=s.scrollLeft-n.scrollSpeed))):(n.axis&&"x"===n.axis||(e.pageY-k(a).scrollTop()<n.scrollSensitivity?o=k(a).scrollTop(k(a).scrollTop()-n.scrollSpeed):k(window).height()-(e.pageY-k(a).scrollTop())<n.scrollSensitivity&&(o=k(a).scrollTop(k(a).scrollTop()+n.scrollSpeed))),n.axis&&"y"===n.axis||(e.pageX-k(a).scrollLeft()<n.scrollSensitivity?o=k(a).scrollLeft(k(a).scrollLeft()-n.scrollSpeed):k(window).width()-(e.pageX-k(a).scrollLeft())<n.scrollSensitivity&&(o=k(a).scrollLeft(k(a).scrollLeft()+n.scrollSpeed)))),!1!==o&&k.ui.ddmanager&&!n.dropBehaviour&&k.ui.ddmanager.prepareOffsets(i,e)}}),k.ui.plugin.add("draggable","snap",{start:function(e,t,i){var n=i.options;i.snapElements=[],k(n.snap.constructor!==String?n.snap.items||":data(ui-draggable)":n.snap).each(function(){var e=k(this),t=e.offset();this!==i.element[0]&&i.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:t.top,left:t.left})})},drag:function(e,t,i){var n,o,s,a,r,l,c,d,p,h,u=i.options,A=u.snapTolerance,f=t.offset.left,g=f+i.helperProportions.width,m=t.offset.top,y=m+i.helperProportions.height;for(p=i.snapElements.length-1;0<=p;p--)l=(r=i.snapElements[p].left-i.margins.left)+i.snapElements[p].width,d=(c=i.snapElements[p].top-i.margins.top)+i.snapElements[p].height,g<r-A||l+A<f||y<c-A||d+A<m||!k.contains(i.snapElements[p].item.ownerDocument,i.snapElements[p].item)?(i.snapElements[p].snapping&&i.options.snap.release&&i.options.snap.release.call(i.element,e,k.extend(i._uiHash(),{snapItem:i.snapElements[p].item})),i.snapElements[p].snapping=!1):("inner"!==u.snapMode&&(n=Math.abs(c-y)<=A,o=Math.abs(d-m)<=A,s=Math.abs(r-g)<=A,a=Math.abs(l-f)<=A,n&&(t.position.top=i._convertPositionTo("relative",{top:c-i.helperProportions.height,left:0}).top),o&&(t.position.top=i._convertPositionTo("relative",{top:d,left:0}).top),s&&(t.position.left=i._convertPositionTo("relative",{top:0,left:r-i.helperProportions.width}).left),a&&(t.position.left=i._convertPositionTo("relative",{top:0,left:l}).left)),h=n||o||s||a,"outer"!==u.snapMode&&(n=Math.abs(c-m)<=A,o=Math.abs(d-y)<=A,s=Math.abs(r-f)<=A,a=Math.abs(l-g)<=A,n&&(t.position.top=i._convertPositionTo("relative",{top:c,left:0}).top),o&&(t.position.top=i._convertPositionTo("relative",{top:d-i.helperProportions.height,left:0}).top),s&&(t.position.left=i._convertPositionTo("relative",{top:0,left:r}).left),a&&(t.position.left=i._convertPositionTo("relative",{top:0,left:l-i.helperProportions.width}).left)),!i.snapElements[p].snapping&&(n||o||s||a||h)&&i.options.snap.snap&&i.options.snap.snap.call(i.element,e,k.extend(i._uiHash(),{snapItem:i.snapElements[p].item})),i.snapElements[p].snapping=n||o||s||a||h)}}),k.ui.plugin.add("draggable","stack",{start:function(e,t,i){var n,o=i.options,s=k.makeArray(k(o.stack)).sort(function(e,t){return(parseInt(k(e).css("zIndex"),10)||0)-(parseInt(k(t).css("zIndex"),10)||0)});s.length&&(n=parseInt(k(s[0]).css("zIndex"),10)||0,k(s).each(function(e){k(this).css("zIndex",n+e)}),this.css("zIndex",n+s.length))}}),k.ui.plugin.add("draggable","zIndex",{start:function(e,t,i){var n=k(t.helper),o=i.options;n.css("zIndex")&&(o._zIndex=n.css("zIndex")),n.css("zIndex",o.zIndex)},stop:function(e,t,i){var n=i.options;n._zIndex&&k(t.helper).css("zIndex",n._zIndex)}});k.ui.draggable},"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery);var s="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function t(e,t){return e(t={exports:{}},t.exports),t.exports}t(function(e){var t,d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t=function(A){var f=A.keyboard=function(c,a){var h,u=this;u.version="1.29.1",u.$el=A(c),u.el=c,u.$el.data("keyboard",u),u.init=function(){u.initialized=!1;var e,t,i,n=f.css,o=f.events;u.settings=a||{},a&&a.position&&(t=A.extend({},a.position),a.position=null),u.options=h=A.extend(!0,{},f.defaultOptions,a),t&&(h.position=t,a.position=t),u.el.active=!0,u.namespace=".keyboard"+Math.random().toString(16).slice(2),u.extensionNamespace=[],u.shiftActive=u.altActive=u.metaActive=u.sets=u.capsLock=!1,u.rows=["","-shift","-alt","-alt-shift"],u.inPlaceholder=u.$el.attr("placeholder")||"",u.watermark=f.watermark&&""!==u.inPlaceholder,u.repeatTime=1e3/(h.repeatRate||20),h.preventDoubleEventTime=h.preventDoubleEventTime||100,u.isOpen=!1,u.wheel="function"==typeof A.fn.mousewheel,u.escapeRegex=/[-\/\\^$*+?.()|[\]{}]/g,u.isTextArea="textarea"===u.el.nodeName.toLowerCase(),u.isInput="input"===u.el.nodeName.toLowerCase(),u.isContentEditable=!u.isTextArea&&!u.isInput&&u.el.isContentEditable,e=f.keyCodes,u.alwaysAllowed=[e.capsLock,e.pageUp,e.pageDown,e.end,e.home,e.left,e.up,e.right,e.down,e.insert,e.delete],u.$keyboard=[],u.enabled=!0,u.checkCaret=h.lockInput||f.checkCaretSupport(),u.isContentEditable&&(h.usePreview=!1),u.last={start:0,end:0,key:"",val:"",preVal:"",layout:"",virtual:!0,keyset:[!1,!1,!1],wheel_$Keys:[],wheelIndex:0,wheelLayers:[]},u.temp=["",0,0],A.each([o.kbInit,o.kbBeforeVisible,o.kbVisible,o.kbHidden,o.inputCanceled,o.inputAccepted,o.kbBeforeClose,o.inputRestricted],function(e,t){"function"==typeof h[t]&&u.$el.bind(t+u.namespace+"callbacks",h[t])}),h.alwaysOpen&&(h.stayOpen=!0),i=A(document),u.el.ownerDocument!==document&&(i=i.add(u.el.ownerDocument));var s="keyup checkkeyboard mousedown touchstart ";h.closeByClickEvent&&(s+="click "),i.bind(s.split(" ").join(u.namespace+" "),function(e){clearTimeout(u.timer3),u.timer3=setTimeout(function(){u.checkClose(e)},1)}),u.$el.addClass(n.input+" "+h.css.input).attr({"aria-haspopup":"true",role:"textbox"}),(h.lockInput||u.el.readOnly)&&(h.lockInput=!0,u.$el.addClass(n.locked).attr({readonly:"readonly"})),u.isUnavailable()&&u.$el.addClass(n.noKeyboard),h.openOn&&u.bindFocus(),u.watermark||""!==u.getValue(u.$el)||""===u.inPlaceholder||""===u.$el.attr("placeholder")||(u.$el.addClass(n.placeholder),u.setValue(u.inPlaceholder,u.$el)),u.$el.trigger(o.kbInit,[u,u.el]),h.alwaysOpen&&u.reveal(),u.initialized=!0},u.toggle=function(){if(u.hasKeyboard()){var e=u.$keyboard.find("."+f.css.keyToggle),t=!u.enabled;return u.preview.readonly=t||u.options.lockInput,u.$keyboard.toggleClass(f.css.keyDisabled,t).find("."+f.css.keyButton).not(e).attr("aria-disabled",t).each(function(){this.disabled=t}),e.toggleClass(f.css.keyDisabled,t),t&&u.typing_options&&(u.typing_options.text=""),u}},u.setCurrent=function(){var e=f.css,t=A("."+e.isCurrent),i=t.data("keyboard");A.isEmptyObject(i)||i.el===u.el||i.close(!!i.options.autoAccept&&"true"),t.removeClass(e.isCurrent),A("."+e.hasFocus).removeClass(e.hasFocus),u.$el.addClass(e.isCurrent),u.$keyboard.addClass(e.hasFocus),u.isCurrent(!0),u.isOpen=!0},u.isUnavailable=function(){return u.$el.is(":disabled")||!u.options.activeOnReadonly&&u.$el.attr("readonly")&&!u.$el.hasClass(f.css.locked)},u.isCurrent=function(e){var t=f.currentKeyboard||!1;return e?t=f.currentKeyboard=u.el:!1===e&&t===u.el&&(t=f.currentKeyboard=""),t===u.el},u.hasKeyboard=function(){return u.$keyboard&&0<u.$keyboard.length},u.isVisible=function(){return!!u.hasKeyboard()&&u.$keyboard.is(":visible")},u.setFocus=function(){var e=u.$preview||u.$el;h.noFocus||e.focus(),u.isContentEditable?f.setEditableCaret(e,u.last.start,u.last.end):f.caret(e,u.last)},u.focusOn=function(){!u&&u.el.active||(u.isVisible()?u.setCurrent():(clearTimeout(u.timer),u.reveal()))},u.redraw=function(e){return e&&(u.options.layout=e),u.$keyboard.length&&(u.last.preVal=""+u.last.val,u.saveLastChange(),u.setValue(u.last.val,u.$el),u.removeKeyboard(),u.shiftActive=u.altActive=u.metaActive=!1),u.isOpen=h.alwaysOpen,u.reveal(!0),u},u.reveal=function(e){var t,i=u.isOpen,n=f.css;if(u.opening=!i,A("."+n.keyboard).not("."+n.alwaysOpen).each(function(){var e=A(this).data("keyboard");A.isEmptyObject(e)||e.close(!!e.options.autoAccept&&"true")}),!u.isUnavailable())return u.$el.removeClass(n.noKeyboard),h.openOn&&u.$el.unbind(A.trim((h.openOn+" ").split(/\s+/).join(u.namespace+" "))),u.$keyboard&&(!u.$keyboard||u.$keyboard.length&&!A.contains(u.el.ownerDocument.body,u.$keyboard[0]))||u.startup(),u.watermark||u.getValue()!==u.inPlaceholder||(u.$el.removeClass(n.placeholder),u.setValue("",u.$el)),u.originalContent=u.isContentEditable?u.$el.html():u.getValue(u.$el),u.el===u.preview||u.isContentEditable||u.setValue(u.originalContent),h.acceptValid&&h.checkValidOnInit&&u.checkValid(),h.resetDefault&&(u.shiftActive=u.altActive=u.metaActive=!1),u.showSet(),u.isVisible()||u.$el.trigger(f.events.kbBeforeVisible,[u,u.el]),(u.initialized||h.initialFocus||!h.initialFocus&&u.$el.hasClass(f.css.initialFocus))&&u.setCurrent(),u.toggle(),u.$keyboard.show(),h.usePreview&&f.msie&&(void 0===u.width&&(u.$preview.hide(),u.width=Math.ceil(u.$keyboard.width()),u.$preview.show()),u.$preview.width(u.width)),u.reposition(),u.checkDecimal(),u.lineHeight=parseInt(u.$preview.css("lineHeight"),10)||parseInt(u.$preview.css("font-size"),10)+4,h.caretToEnd&&(t=u.isContentEditable?f.getEditableLength(u.el):u.originalContent.length,u.saveCaret(t,t)),f.allie&&(0===u.last.end&&0<u.last.start&&(u.last.end=u.last.start),u.last.start<0&&(u.last.start=u.last.end=u.originalContent.length)),i||e?(f.caret(u.$preview,u.last),u.opening=!1):u.timer2=setTimeout(function(){u.opening=!1,/(number|email)/i.test(u.el.type)||h.caretToEnd||u.saveCaret(void 0,void 0,u.$el),(h.initialFocus||u.$el.hasClass(f.css.initialFocus))&&f.caret(u.$preview,u.last),u.last.eventTime=(new Date).getTime(),u.$el.trigger(f.events.kbVisible,[u,u.el]),u.timer=setTimeout(function(){u&&u.saveCaret()},200)},10),u},u.updateLanguage=function(){var e=f.layouts,t=h.language||e[h.layout]&&e[h.layout].lang&&e[h.layout].lang||[h.language||"en"],i=f.language;t="[object Array]"===Object.prototype.toString.call(t)?t[0]:t,t=(u.language=t).split("-")[0],h.display=A.extend(!0,{},i.en.display,i[t]&&i[t].display||{},u.settings.display),h.combos=A.extend(!0,{},i.en.combos,i[t]&&i[t].combos||{},u.settings.combos),h.wheelMessage=i[t]&&i[t].wheelMessage||i.en.wheelMessage,h.rtl=e[h.layout]&&e[h.layout].rtl||i[t]&&i[t].rtl||!1,i[t]&&i[t].comboRegex&&(u.regex=i[t].comboRegex),u.decimal=/^\./.test(h.display.dec),u.$el.toggleClass("rtl",h.rtl).css("direction",h.rtl?"rtl":"")},u.startup=function(){var e=f.css;(h.alwaysOpen||h.userClosed)&&u.$preview||u.makePreview(),u.hasKeyboard()||("custom"===h.layout&&(h.layoutHash="custom"+u.customHash()),u.layout="custom"===h.layout?h.layoutHash:h.layout,u.last.layout=u.layout,u.updateLanguage(),void 0===f.builtLayouts[u.layout]&&("function"==typeof h.create?u.$keyboard=h.create(u):u.$keyboard.length||u.buildKeyboard(u.layout,!0)),u.$keyboard=f.builtLayouts[u.layout].$keyboard.clone(),u.$keyboard.data("keyboard",u),""!==(u.el.id||"")&&u.$keyboard.attr("id",u.el.id+f.css.idSuffix),u.makePreview()),u.$keyboard.attr("data-"+e.keyboard+"-layout",h.layout).attr("data-"+e.keyboard+"-language",u.language),u.$decBtn=u.$keyboard.find("."+e.keyPrefix+"dec"),(h.enterNavigation||u.isTextArea)&&u.alwaysAllowed.push(f.keyCodes.enter),u.bindKeyboard(),u.$keyboard.appendTo(h.appendLocally?u.$el.parent():h.appendTo||"body"),u.bindKeys(),h.reposition&&A.ui&&A.ui.position&&"body"===h.appendTo&&A(window).bind("resize"+u.namespace,function(){u.reposition()})},u.reposition=function(){return u.position=!A.isEmptyObject(h.position)&&h.position,A.ui&&A.ui.position&&u.position&&(u.position.of=u.position.of||u.$el.data("keyboardPosition")||u.$el,u.position.collision=u.position.collision||"flipfit flipfit",u.position.at=h.usePreview?h.position.at:h.position.at2,u.isVisible()&&u.$keyboard.position(u.position)),u},u.makePreview=function(){if(h.usePreview){var e,t,i,n,o=f.css;for(u.$preview=u.$el.clone(!1).data("keyboard",u).removeClass(o.placeholder+" "+o.input).addClass(o.preview+" "+h.css.input).attr("tabindex","-1").show(),u.preview=u.$preview[0],"number"===u.preview.type&&(u.preview.type="text"),n=/^(data-|id|aria-haspopup)/i,e=(t=u.$preview.get(0).attributes).length-1;0<=e;e--)i=t[e]&&t[e].name,n.test(i)&&u.preview.removeAttribute(i);A("<div />").addClass(o.wrapper).append(u.$preview).prependTo(u.$keyboard)}else u.$preview=u.$el,u.preview=u.el},u.caret=function(e,t){var i=f.caret(u.$preview,e,t);return i instanceof A?(u.saveCaret(i.start,i.end),u):i},u.saveCaret=function(e,t,i){var n;u.isCurrent()&&(n=void 0===e?f.caret(i||u.$preview):f.caret(i||u.$preview,e,t),u.last.start=void 0===e?n.start:e,u.last.end=void 0===t?n.end:t)},u.saveLastChange=function(e){u.last.val=e||u.getValue(u.$preview||u.$el),u.isContentEditable&&(u.last.elms=u.el.cloneNode(!0))},u.setScroll=function(){if(!u.isContentEditable&&u.last.virtual){var e,t,i,n,o=u.last.val.substring(0,Math.max(u.last.start,u.last.end));u.$previewCopy||(u.$previewCopy=u.$preview.clone().removeAttr("id").css({position:"absolute",left:0,zIndex:-10,visibility:"hidden"}).addClass(f.css.inputClone),u.$previewCopy[0].disabled=!0,u.isTextArea||u.$previewCopy.css({"white-space":"pre",width:0}),h.usePreview?u.$preview.after(u.$previewCopy):u.$keyboard.prepend(u.$previewCopy)),u.isTextArea?(u.$previewCopy.height(u.lineHeight).val(o),u.preview.scrollTop=u.lineHeight*(Math.floor(u.$previewCopy[0].scrollHeight/u.lineHeight)-1)):(u.$previewCopy.val(o.replace(/\s/g," ")),i=/c/i.test(h.scrollAdjustment)?u.preview.clientWidth/2:h.scrollAdjustment,e=u.$previewCopy[0].scrollWidth-1,void 0===u.last.scrollWidth&&(u.last.scrollWidth=e,u.last.direction=!0),n=u.last.scrollWidth===e?u.last.direction:u.last.scrollWidth<e,t=u.preview.clientWidth-i,n?u.preview.scrollLeft=e<t?0:e-t:e>=u.preview.scrollWidth-t?u.preview.scrollLeft=u.preview.scrollWidth-i:u.preview.scrollLeft=0<e-i?e-i:0,u.last.scrollWidth=e,u.last.direction=n)}},u.bindFocus=function(){h.openOn&&u&&u.el.active&&(u.$el.bind(h.openOn+u.namespace,function(){u.focusOn()}),A(":focus")[0]===u.el&&u.$el.blur())},u.bindKeyboard=function(){var s,a=f.keyCodes,r=f.builtLayouts[u.layout],e=u.namespace+"keybindings";u.$preview.unbind(u.namespace).bind("click"+e+" touchstart"+e,function(){h.alwaysOpen&&!u.isCurrent()&&u.reveal(),u.timer2=setTimeout(function(){u&&u.saveCaret()},150)}).bind("keypress"+e,function(e){if(h.lockInput)return!1;if(u.isCurrent()){var t=e.charCode||e.which,i=t>=a.A&&t<=a.Z,n=t>=a.a&&t<=a.z,o=u.last.key=String.fromCharCode(t);if(!(t<a.space)){if(u.last.virtual=!1,u.last.event=e,u.last.$key=[],u.checkCaret&&u.saveCaret(),t!==a.capsLock&&(i||n)&&(u.capsLock=i&&!e.shiftKey||n&&e.shiftKey,u.capsLock&&!u.shiftActive&&(u.shiftActive=!0,u.showSet())),h.restrictInput){if((e.which===a.backSpace||0===e.which)&&A.inArray(e.keyCode,u.alwaysAllowed))return;-1===A.inArray(o,r.acceptedKeys)&&(e.preventDefault(),(s=A.extend({},e)).type=f.events.inputRestricted,u.$el.trigger(s,[u,u.el]))}else if((e.ctrlKey||e.metaKey)&&(e.which===a.A||e.which===a.C||e.which===a.V||e.which>=a.X&&e.which<=a.Z))return;r.hasMappedKeys&&r.mappedKeys.hasOwnProperty(o)&&(u.last.key=r.mappedKeys[o],u.insertText(u.last.key),e.preventDefault()),"function"==typeof h.beforeInsert&&(u.insertText(u.last.key),e.preventDefault()),u.checkMaxLength()}}}).bind("keyup"+e,function(e){if(u.isCurrent()){switch(u.last.virtual=!1,e.which){case a.tab:if(u.tab&&!h.lockInput){u.shiftActive=e.shiftKey;var t=f.keyaction.tab(u);if(u.tab=!1,!t)return!1}else e.preventDefault();break;case a.escape:return h.ignoreEsc||u.close(!(!h.autoAccept||!h.autoAcceptOnEsc)&&"true"),!1}clearTimeout(u.throttled),u.throttled=setTimeout(function(){u&&u.isVisible()&&u.checkCombos()},100),u.checkMaxLength(),u.last.preVal=""+u.last.val,u.saveLastChange();var i=A.Event(f.events.kbChange);if(i.action=u.last.key,u.$el.trigger(i,[u,u.el]),"function"==typeof h.change)return i.type=f.events.inputChange,h.change(i,u,u.el),!1;h.acceptValid&&h.autoAcceptOnValid&&"function"==typeof h.validate&&h.validate(u,u.getValue(u.$preview))&&(u.$preview.blur(),u.accept())}}).bind("keydown"+e,function(e){if(u.last.keyPress=e.which,h.alwaysOpen&&!u.isCurrent()&&u.reveal(),e.which===a.tab)return!(u.tab=!0);if(h.lockInput||e.timeStamp===u.last.timeStamp)return!h.lockInput;switch(u.last.timeStamp=e.timeStamp,u.last.virtual=!1,e.which){case a.backSpace:f.keyaction.bksp(u,null,e),e.preventDefault();break;case a.enter:f.keyaction.enter(u,null,e);break;case a.capsLock:u.shiftActive=u.capsLock=!u.capsLock,u.showSet();break;case a.V:if(e.ctrlKey||e.metaKey){if(h.preventPaste)return void e.preventDefault();u.checkCombos()}}}).bind("mouseup touchend ".split(" ").join(e+" "),function(){u.last.virtual=!0,u.saveCaret()}),u.$keyboard.bind("mousedown click touchstart ".split(" ").join(u.namespace+" "),function(e){e.stopPropagation(),u.isCurrent()||(u.reveal(),A(u.el.ownerDocument).trigger("checkkeyboard"+u.namespace)),u.setFocus()}),h.preventPaste&&(u.$preview.bind("contextmenu"+u.namespace,function(e){e.preventDefault()}),u.$el.bind("contextmenu"+u.namespace,function(e){e.preventDefault()}))},u.bindButton=function(e,t){function i(e){e.stopPropagation(),e.$target=A(this).closest("."+f.css.keyboard+", ."+f.css.input),t.call(this,e)}var n="."+f.css.keyButton;return A.fn.on?u.$keyboard.on(e,n,i):A.fn.delegate&&u.$keyboard.delegate(n,e,i),u},u.unbindButton=function(e){return A.fn.off?u.$keyboard.off(e):A.fn.undelegate&&u.$keyboard.undelegate("."+f.css.keyButton,e),u},u.bindKeys=function(){var s=f.css;u.unbindButton(u.namespace+" "+u.namespace+"kb").bindButton("mouseenter mouseleave touchstart ".split(" ").join(u.namespace+" "),function(e){if(!h.alwaysOpen&&!h.userClosed||"mouseleave"===e.type||u.isCurrent()||(u.reveal(),u.setFocus()),u.isCurrent()&&!this.disabled){var t,i,n=u.last,o=A(this),s=e.type;h.useWheel&&u.wheel&&(t=u.getLayers(o),i=(t.length?t.map(function(){return A(this).attr("data-value")||""}).get():"")||[o.text()],n.wheel_$Keys=t,n.wheelLayers=i,n.wheelIndex=A.inArray(o.attr("data-value"),i)),"mouseenter"!==s&&"touchstart"!==s||"password"===u.el.type||o.hasClass(h.css.buttonDisabled)||(o.addClass(h.css.buttonHover),h.useWheel&&u.wheel&&o.attr("title",function(e,t){return u.wheel&&""===t&&u.sets&&1<i.length&&"touchstart"!==s?h.wheelMessage:t})),"mouseleave"===s&&(o.removeClass("password"===u.el.type?"":h.css.buttonHover),h.useWheel&&u.wheel&&(n.wheelIndex=0,n.wheelLayers=[],n.wheel_$Keys=[],o.attr("title",function(e,t){return t===h.wheelMessage?"":t}).html(o.attr("data-html"))))}}).bindButton(h.keyBinding.split(" ").join(u.namespace+" ")+u.namespace+" "+f.events.kbRepeater,function(e){if(e.preventDefault(),!u.$keyboard.is(":visible")||this.disabled)return!1;var t,i=u.last,n=A(this),o=(new Date).getTime();if(h.useWheel&&u.wheel&&(n=i.wheel_$Keys.length&&-1<i.wheelIndex?i.wheel_$Keys.eq(i.wheelIndex):n),t=n.attr("data-action"),!(o-(i.eventTime||0)<h.preventDoubleEventTime)){if(i.eventTime=o,i.event=e,i.virtual=!0,i.$key=n,i.key=n.attr("data-value"),i.keyPress="",u.setFocus(),/^meta/.test(t)&&(t="meta"),t===i.key&&"string"==typeof f.keyaction[t])i.key=t=f.keyaction[t];else if(t in f.keyaction&&"function"==typeof f.keyaction[t]){if(!1===f.keyaction[t](u,this,e))return!1;t=null}return!!u.hasKeyboard()&&(null!=t&&(i.key=A(this).hasClass(s.keyAction)?t:i.key,u.insertText(i.key),u.capsLock||h.stickyShift||e.shiftKey||(u.shiftActive=!1,u.showSet(n.attr("data-name")))),f.caret(u.$preview,i),u.checkCombos(),(e=A.extend({},e,A.Event(f.events.kbChange))).target=u.el,e.action=i.key,u.$el.trigger(e,[u,u.el]),i.preVal=""+i.val,u.saveLastChange(),"function"==typeof h.change?(e.type=f.events.inputChange,h.change(e,u,u.el),!1):void 0)}}).bindButton("mouseup"+u.namespace+" "+"mouseleave touchend touchmove touchcancel ".split(" ").join(u.namespace+"kb "),function(e){u.last.virtual=!0;var t,i=A(this);if("touchmove"===e.type){if((t=i.offset()).right=t.left+i.outerWidth(),t.bottom=t.top+i.outerHeight(),e.originalEvent.touches[0].pageX>=t.left&&e.originalEvent.touches[0].pageX<t.right&&e.originalEvent.touches[0].pageY>=t.top&&e.originalEvent.touches[0].pageY<t.bottom)return!0}else/(mouseleave|touchend|touchcancel)/i.test(e.type)?i.removeClass(h.css.buttonHover):(!h.noFocus&&u.isCurrent()&&u.isVisible()&&u.$preview.focus(),u.checkCaret&&f.caret(u.$preview,u.last));return u.mouseRepeat=[!1,""],clearTimeout(u.repeater),h.acceptValid&&h.autoAcceptOnValid&&"function"==typeof h.validate&&h.validate(u,u.getValue())&&(u.$preview.blur(),u.accept()),!1}).bindButton("click"+u.namespace,function(){return!1}).bindButton("mousewheel"+u.namespace,u.throttleEvent(function(e,t){var i=A(this);if(i&&!i.hasClass(s.keyAction)&&u.last.wheel_$Keys[0]===this&&h.useWheel&&u.wheel){t=t||e.deltaY;var n,o=u.last.wheelLayers||[];return 1<o.length?((n=u.last.wheelIndex+(0<t?-1:1))>o.length-1&&(n=0),n<0&&(n=o.length-1)):n=0,u.last.wheelIndex=n,i.html(o[n]),!1}},30)).bindButton("mousedown touchstart ".split(" ").join(u.namespace+"kb "),function(){var e=A(this);if(e&&(!e.hasClass(s.keyAction)||e.is("."+s.keyPrefix+"tab bksp space enter".split(" ").join(",."+s.keyPrefix))))return 0!==h.repeatRate&&(u.mouseRepeat=[!0,e],setTimeout(function(){u&&u.mouseRepeat[0]&&u.mouseRepeat[1]===e&&!e[0].disabled&&u.repeatKey(e)},h.repeatDelay)),!1})},u.throttleEvent=function(e,t){var i;return function(){i||(e.apply(this,arguments),i=!0,setTimeout(function(){i=!1},t))}},u.execCommand=function(e,t){u.el.ownerDocument.execCommand(e,!1,t),u.el.normalize(),h.reposition&&u.reposition()},u.getValue=function(e){return(e=e||u.$preview)[u.isContentEditable?"text":"val"]()},u.setValue=function(e,t){return t=t||u.$preview,u.isContentEditable?e!==t.text()&&(f.replaceContent(t,e),u.saveCaret()):t.val(e),u},u.insertText=function(e){if(!u.$preview)return u;if("function"==typeof h.beforeInsert&&(e=h.beforeInsert(u.last.event,u,u.el,e)),void 0===e||!1===e)return u.last.key="",u;if(u.isContentEditable)return u.insertContentEditable(e);var t,i=!1,n="\b"===e,o=u.getValue(),s=f.caret(u.$preview),a=o.length;return s.end<s.start&&(s.end=s.start),s.start>a&&(s.end=s.start=a),u.isTextArea&&f.msie&&"\n"===o.substring(s.start,s.start+1)&&(s.start+=1,s.end+=1),t=s.start,"{d}"===e&&(e="",s.end+=1),n&&(e="",i=n&&t===s.end&&0<t),o=o.substring(0,t-(i?1:0))+e+o.substring(s.end),t+=i?-1:e.length,u.setValue(o),u.saveCaret(t,t),u.setScroll(),u},u.insertContentEditable=function(e){return u.$preview.focus(),u.execCommand("insertText",e),u.saveCaret(),u},u.checkMaxLength=function(){if(u.$preview){var e,t,i=u.getValue(),n=u.isContentEditable?f.getEditableLength(u.el):i.length;return!1!==h.maxLength&&n>h.maxLength&&(e=f.caret(u.$preview).start,t=Math.min(e,h.maxLength),h.maxInsert||(i=u.last.val,t=e-1),u.setValue(i.substring(0,h.maxLength)),u.saveCaret(t,t)),u.$decBtn.length&&u.checkDecimal(),u}},u.repeatKey=function(e){e.trigger(f.events.kbRepeater),u.mouseRepeat[0]&&(u.repeater=setTimeout(function(){u&&u.repeatKey(e)},u.repeatTime))},u.getKeySet=function(){var e=[];return u.altActive&&e.push("alt"),u.shiftActive&&e.push("shift"),u.metaActive&&e.push(u.metaActive),e.length?e.join("+"):"normal"},u.showKeySet=function(e){return"string"==typeof e?(u.last.keyset=[u.shiftActive,u.altActive,u.metaActive],u.shiftActive=/shift/i.test(e),u.altActive=/alt/i.test(e),/\bmeta/.test(e)?(u.metaActive=!0,u.showSet(e.match(/\bmeta[\w-]+/i)[0])):(u.metaActive=!1,u.showSet())):u.showSet(e),u},u.showSet=function(e){if(u.hasKeyboard()){h=u.options;var t=f.css,i="."+t.keyPrefix,n=h.css.buttonActive,o="",s=(u.shiftActive?1:0)+(u.altActive?2:0);if(u.shiftActive||(u.capsLock=!1),u.metaActive?(u.shiftActive&&(e=(e||"").replace("-shift","")),u.altActive&&(e=(e||"").replace("-alt","")),""===(o=/^meta/i.test(e)?e:"")?o=!0===u.metaActive?"":u.metaActive:u.metaActive=o,(!h.stickyShift&&u.last.keyset[2]!==u.metaActive||(u.shiftActive||u.altActive)&&!u.$keyboard.find("."+t.keySet+"-"+o+u.rows[s]).length)&&(u.shiftActive=u.altActive=!1)):!h.stickyShift&&u.last.keyset[2]!==u.metaActive&&u.shiftActive&&(u.shiftActive=u.altActive=!1),o=0!==(s=(u.shiftActive?1:0)+(u.altActive?2:0))||u.metaActive?""===o?"":"-"+o:"-normal",!u.$keyboard.find("."+t.keySet+o+u.rows[s]).length)return u.shiftActive=u.last.keyset[0],u.altActive=u.last.keyset[1],void(u.metaActive=u.last.keyset[2]);u.$keyboard.find(i+"alt,"+i+"shift,."+t.keyAction+"[class*=meta]").removeClass(n).end().find(i+"alt").toggleClass(n,u.altActive).end().find(i+"shift").toggleClass(n,u.shiftActive).end().find(i+"lock").toggleClass(n,u.capsLock).end().find("."+t.keySet).hide().end().find("."+(t.keyAction+i+o).replace("--","-")).addClass(n),u.$keyboard.find("."+t.keySet+o+u.rows[s])[0].style.display="inline-block",u.metaActive&&u.$keyboard.find(i+u.metaActive).toggleClass(n,!1!==u.metaActive),u.last.keyset=[u.shiftActive,u.altActive,u.metaActive],u.$el.trigger(f.events.kbKeysetChange,[u,u.el]),h.reposition&&u.reposition()}},u.checkCombos=function(){if(!(u.isVisible()||u.hasKeyboard()&&u.$keyboard.hasClass(f.css.hasFocus)))return u.getValue(u.$preview||u.$el);var e,t,i,n,o=u.getValue(),s=f.caret(u.$preview),a=f.builtLayouts[u.layout],r=u.isContentEditable?f.getEditableLength(u.el):o.length,l=r;return""===o||(s.end<s.start&&(s.end=s.start),s.start>l&&(s.end=s.start=l),f.msie&&"\n"===o.substring(s.start,s.start+1)&&(s.start+=1,s.end+=1),h.useCombos&&(f.msie?o=o.replace(u.regex,function(e,t,i){return h.combos.hasOwnProperty(t)&&h.combos[t][i]||e}):u.$preview.length&&(t=s.start-(0<=s.start-2?2:0),f.caret(u.$preview,t,s.end),i=(n=function(e){return(e||"").replace(u.regex,function(e,t,i){return h.combos.hasOwnProperty(t)&&h.combos[t][i]||e})})((t=f.caret(u.$preview)).text),t&&t.replaceStr&&i!==t.text&&(u.isContentEditable?f.replaceContent(c,n):u.setValue(t.replaceStr(i))),o=u.getValue())),h.restrictInput&&""!==o&&(t=a.acceptedKeys.length,(e=a.acceptedKeysRegex)||(i=A.map(a.acceptedKeys,function(e){return e.replace(u.escapeRegex,"\\$&")}),-1<u.alwaysAllowed.indexOf(f.keyCodes.enter)&&i.push("\\n"),e=a.acceptedKeysRegex=new RegExp("("+i.join("|")+")","g")),(i=o.match(e))?o=i.join(""):(o="",l=0)),s.start+=r-l,s.end+=r-l,u.setValue(o),u.saveCaret(s.start,s.end),u.setScroll(),u.checkMaxLength()),h.acceptValid&&u.checkValid(),o},u.checkValid=function(){var e=f.css,t=u.$keyboard.find("."+e.keyPrefix+"accept"),i=!0;"function"==typeof h.validate&&(i=h.validate(u,u.getValue(),!1)),t.toggleClass(e.inputInvalid,!i).toggleClass(e.inputValid,i).attr("title",t.attr("data-title")+" ("+h.display[i?"valid":"invalid"]+")")},u.checkDecimal=function(){u.decimal&&/\./g.test(u.preview.value)||!u.decimal&&/\,/g.test(u.preview.value)?u.$decBtn.attr({disabled:"disabled","aria-disabled":"true"}).removeClass(h.css.buttonHover).addClass(h.css.buttonDisabled):u.$decBtn.removeAttr("disabled").attr({"aria-disabled":"false"}).addClass(h.css.buttonDefault).removeClass(h.css.buttonDisabled)},u.getLayers=function(e){var t=f.css,i=e.attr("data-pos");return e.closest("."+t.keyboard).find('button[data-pos="'+i+'"]').filter(function(){return""!==A(this).find("."+t.keyText).text()}).add(e)},u.switchInput=function(e,t){if("function"==typeof h.switchInput)h.switchInput(u,e,t);else{u.$keyboard.length&&u.$keyboard.hide();var i,n=!1,o=A("button, input, select, textarea, a, [contenteditable]").filter(":visible").not(":disabled"),s=o.index(u.$el)+(e?1:-1);if(u.$keyboard.length&&u.$keyboard.show(),s>o.length-1&&(n=h.stopAtEnd,s=0),s<0&&(n=h.stopAtEnd,s=o.length-1),!n){if(!(t=u.close(t)))return;(i=o.eq(s).data("keyboard"))&&i.options.openOn.length?i.focusOn():o.eq(s).focus()}}return!1},u.close=function(e){if(u.isOpen&&u.$keyboard.length){clearTimeout(u.throttled);var t=f.css,i=f.events,n=e?u.checkCombos():u.originalContent;if(e&&"function"==typeof h.validate&&!h.validate(u,n,!0)&&(n=u.originalContent,e=!1,h.cancelClose))return;u.isCurrent(!1),u.isOpen=h.alwaysOpen||h.userClosed,u.isContentEditable&&!e?u.$el.html(n):u.setValue(n,u.$el),u.$el.removeClass(t.isCurrent+" "+t.inputAutoAccepted).addClass(e?!0===e?"":t.inputAutoAccepted:"").trigger(i.inputChange),h.alwaysOpen||u.$el.trigger(i.kbBeforeClose,[u,u.el,e||!1]),f.caret(u.$preview,u.last),u.$el.trigger(e?i.inputAccepted:i.inputCanceled,[u,u.el]).trigger(h.alwaysOpen?i.kbInactive:i.kbHidden,[u,u.el]).blur(),u&&(u.last.eventTime=(new Date).getTime(),h.alwaysOpen||h.userClosed&&"true"===e||!u.$keyboard.length||(u.removeKeyboard(),u.timer=setTimeout(function(){u&&u.bindFocus()},200)),u.watermark||""!==u.el.value||""===u.inPlaceholder||(u.$el.addClass(t.placeholder),u.setValue(u.inPlaceholder,u.$el)))}return!!e},u.accept=function(){return u.close(!0)},u.checkClose=function(e){if(!u.opening){var t=A.keyboard.css,i=e.$target||A(e.target).closest("."+f.css.keyboard+", ."+f.css.input);if(i.length||(i=A(e.target)),i.length&&i.hasClass(t.keyboard)){var n=i.data("keyboard");n!==u&&!n.$el.hasClass(t.isCurrent)&&n.options.openOn&&e.type===h.openOn&&n.focusOn()}else u.escClose(e,i)}},u.escCloseCallback={keepOpen:function(){return!u.isOpen}},u.escClose=function(e,t){if(u.isOpen){if(e&&"keyup"===e.type)return e.which!==f.keyCodes.escape||h.ignoreEsc?"":u.close(!(!h.autoAccept||!h.autoAcceptOnEsc)&&"true");var i=!1,n=t.length&&t||A(e.target);if(A.each(u.escCloseCallback,function(e,t){"function"==typeof t&&(i=i||t(n))}),!i&&(!u.isCurrent()&&u.isOpen||u.isOpen&&n[0]!==u.el)){if((h.stayOpen||h.userClosed)&&!n.hasClass(f.css.input))return;if(f.allie&&e.preventDefault(),h.closeByClickEvent){var o=n[0]&&n[0].nodeName.toLowerCase();"input"!==o&&"textarea"!==o&&"click"!==e.type||u.close(!!h.autoAccept&&"true")}else u.close(!!h.autoAccept&&"true")}}},u.keyBtn=A("<button />").attr({role:"button",type:"button","aria-disabled":"false",tabindex:"-1"}).addClass(f.css.keyButton),u.processName=function(e){var t,i,n=(e||"").replace(/[^a-z0-9-_]/gi,""),o=n.length,s=[];if(1<o&&e===n)return e;if(o=e.length){for(t=0;t<o;t++)i=e[t],s.push(/[a-z0-9-_]/i.test(i)?/[-_]/.test(i)&&0!==t?"":i:(0===t?"":"-")+i.charCodeAt(0));return s.join("")}return e},u.processKeys=function(e){var t,i=e.split(/:(?!\/\/)/),n=e.indexOf("</"),o=e.indexOf(":",e.indexOf("<")),s={name:null,map:"",title:""};return-1<n&&(o<0||n<o)?s.name=e:(/\(.+\)/.test(i[0])||/^:\(.+\)/.test(e)||/\([(:)]\)/.test(e)?/\([(:)]\)/.test(e)?(t=i[0].match(/([^(]+)\((.+)\)/))&&t.length?(s.name=t[1],s.map=t[2],s.title=1<i.length?i.slice(1).join(":"):""):(s.name=e.match(/([^(]+)/)[0],":"===s.name&&(i=i.slice(1)),null===t&&(s.map=":",i=i.slice(2)),s.title=i.length?i.join(":"):""):(s.map=e.match(/\(([^()]+?)\)/)[1],""===(t=(e=e.replace(/\(([^()]+)\)/,"")).split(":"))[0]?(s.name=":",i=i.slice(1)):s.name=t[0],s.title=1<i.length?i.slice(1).join(":"):""):(""!==e&&""===i[0]?(s.name=":",i=i.slice(1)):s.name=i[0],s.title=1<i.length?i.slice(1).join(":"):""),s.title=A.trim(s.title).replace(/_/g," ")),s},u.addKey=function(e,t,i){var n,o,s,a={},r=u.processKeys(i?e:t),l=f.css;return!i&&h.display[r.name]?(s=u.processKeys(h.display[r.name])).action=u.processKeys(e).name:(s=r).action=r.name,a.name=u.processName(r.name),""!==s.name&&(""!==s.map?(f.builtLayouts[u.layout].mappedKeys[s.map]=s.name,f.builtLayouts[u.layout].acceptedKeys.push(s.name)):i&&f.builtLayouts[u.layout].acceptedKeys.push(s.name)),n=i?""===a.name?"":l.keyPrefix+a.name:l.keyAction+" "+l.keyPrefix+s.action,n+=(2<s.name.length?" "+l.keyWide:"")+" "+h.css.buttonDefault,a.html='<span class="'+l.keyText+'">'+s.name.replace(/[\u00A0-\u9999]/gim,function(e){return"&#"+e.charCodeAt(0)+";"})+"</span>",a.$key=u.keyBtn.clone().attr({"data-value":i?s.name:s.action,"data-name":s.action,"data-pos":u.temp[1]+","+u.temp[2],"data-action":s.action,"data-html":a.html}).addClass(n).html(a.html).appendTo(u.temp[0]),s.map&&a.$key.attr("data-mapped",s.map),(s.title||r.title)&&a.$key.attr({"data-title":r.title||s.title,title:r.title||s.title}),"function"==typeof h.buildKey&&(o=(a=h.buildKey(u,a)).$key.html(),a.$key.attr("data-html",o)),a.$key},u.customHash=function(e){var t,i,n,o,s=[],a=[];for(i in e=void 0===e?h.customLayout:e)e.hasOwnProperty(i)&&s.push(e[i]);if((n=0)===(o=(a=a.concat.apply(a,s).join(" ")).length))return n;for(t=0;t<o;t++)n=(n<<5)-n+a.charCodeAt(t),n&=n;return n},u.buildKeyboard=function(e,t){A.isEmptyObject(h.display)&&u.updateLanguage();var i,n,o,s,a=f.css,r=0,l=f.builtLayouts[e||u.layout||h.layout]={mappedKeys:{},acceptedKeys:[]},c=l.acceptedKeys=h.restrictInclude&&(""+h.restrictInclude).split(/\s+/)||[],d=a.keyboard+" "+h.css.popup+" "+h.css.container+(h.alwaysOpen||h.userClosed?" "+a.alwaysOpen:""),p=A("<div />").addClass(d).attr({role:"textbox"}).hide();return-1<(i=A.inArray("{space}",c))&&(c[i]=" "),d=t&&"custom"===h.layout||!f.layouts.hasOwnProperty(h.layout)?(h.layout="custom",f.layouts.custom=h.customLayout||{normal:["{cancel}"]}):f.layouts[t?h.layout:e||u.layout||h.layout],A.each(d,function(e,t){if(""!==e&&!/^(name|lang|rtl)$/i.test(e))for("default"===e&&(e="normal"),r++,o=A("<div />").attr("name",e).addClass(a.keySet+" "+a.keySet+"-"+e).appendTo(p).toggle("normal"===e),n=0;n<t.length;n++)s=A.trim(t[n]).replace(/\{(\.?)[\s+]?:[\s+]?(\.?)\}/g,"{$1:$2}"),u.buildRow(o,n,s.split(/\s+/),c),o.find("."+a.keyButton+",."+a.keySpacer).filter(":last").after('<br class="'+a.endRow+'"/>')}),1<r&&(u.sets=!0),l.hasMappedKeys=!A.isEmptyObject(l.mappedKeys),l.$keyboard=p},u.buildRow=function(e,t,i,n){var o,s,a,r,l,c,d=f.css;for(a=0;a<i.length;a++)if(r=!(u.temp=[e,t,a]),0!==i[a].length)if(/^\{\S+\}$/.test(i[a])){if(l=i[a].match(/^\{(\S+)\}$/)[1],/\!\!/.test(l)&&(l=l.replace("!!",""),r=!0),/^sp:((\d+)?([\.|,]\d+)?)(em|px)?$/i.test(l)&&(c=parseFloat(l.replace(/,/,".").match(/^sp:((\d+)?([\.|,]\d+)?)(em|px)?$/i)[1]||0),A('<span class="'+d.keyText+'"></span>').width(l.match(/px/i)?c+"px":2*c+"em").addClass(d.keySpacer).appendTo(e)),/^empty(:((\d+)?([\.|,]\d+)?)(em|px)?)?$/i.test(l)){c=/:/.test(l)?parseFloat(l.replace(/,/,".").match(/^empty:((\d+)?([\.|,]\d+)?)(em|px)?$/i)[1]||0):"",u.addKey(""," ",!0).addClass(h.css.buttonDisabled+" "+h.css.buttonEmpty).attr("aria-disabled",!0).width(c?l.match("px")?c+"px":2*c+"em":"");continue}if(/^meta[\w-]+\:?(\w+)?/i.test(l)){u.addKey(l.split(":")[0],l).addClass(d.keyHasActive);continue}switch((s=l.split(":"))[0].toLowerCase()){case"a":case"accept":u.addKey("accept",l).addClass(h.css.buttonAction+" "+d.keyAction);break;case"alt":case"altgr":u.addKey("alt",l).addClass(d.keyHasActive);break;case"b":case"bksp":u.addKey("bksp",l);break;case"c":case"cancel":u.addKey("cancel",l).addClass(h.css.buttonAction+" "+d.keyAction);break;case"combo":u.addKey("combo",l).addClass(d.keyHasActive).attr("title",function(e,t){return t+" "+h.display[h.useCombos?"active":"disabled"]}).toggleClass(h.css.buttonActive,h.useCombos);break;case"dec":n.push(u.decimal?".":","),u.addKey("dec",l);break;case"e":case"enter":u.addKey("enter",l).addClass(h.css.buttonAction+" "+d.keyAction);break;case"lock":u.addKey("lock",l).addClass(d.keyHasActive);break;case"s":case"shift":u.addKey("shift",l).addClass(d.keyHasActive);break;case"sign":n.push("-"),u.addKey("sign",l);break;case"space":n.push(" "),u.addKey("space",l);break;case"t":case"tab":u.addKey("tab",l);break;default:f.keyaction.hasOwnProperty(s[0])&&u.addKey(s[0],l).toggleClass(h.css.buttonAction+" "+d.keyAction,r)}}else o=i[a],u.addKey(o,o,!0)},u.removeBindings=function(e){A(document).unbind(e),u.el.ownerDocument!==document&&A(u.el.ownerDocument).unbind(e),A(window).unbind(e),u.$el.unbind(e)},u.removeKeyboard=function(){u.$decBtn=[],h.usePreview&&u.$preview.removeData("keyboard"),u.$preview.unbind(u.namespace+"keybindings"),u.preview=null,u.$preview=null,u.$previewCopy=null,u.$keyboard.removeData("keyboard"),u.$keyboard.remove(),u.$keyboard=[],u.isOpen=!1,u.isCurrent(!1)},u.destroy=function(e){var t,i=f.css,n=u.extensionNamespace.length,o=[i.input,i.locked,i.placeholder,i.noKeyboard,i.alwaysOpen,h.css.input,i.isCurrent].join(" ");for(clearTimeout(u.timer),clearTimeout(u.timer2),clearTimeout(u.timer3),u.$keyboard.length&&u.removeKeyboard(),u.options.openOn&&u.removeBindings(u.options.openOn),u.removeBindings(u.namespace),u.removeBindings(u.namespace+"callbacks"),t=0;t<n;t++)u.removeBindings(u.extensionNamespace[t]);u.el.active=!1,u.$el.removeClass(o).removeAttr("aria-haspopup").removeAttr("role").removeData("keyboard"),u=null,"function"==typeof e&&e()},u.init()};return f.keyCodes={backSpace:8,tab:9,enter:13,capsLock:20,escape:27,space:32,pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,A:65,Z:90,V:86,C:67,X:88,a:97,z:122},f.css={idSuffix:"_keyboard",initialFocus:"keyboard-init-focus",input:"ui-keyboard-input",inputClone:"ui-keyboard-preview-clone",wrapper:"ui-keyboard-preview-wrapper",preview:"ui-keyboard-preview",keyboard:"ui-keyboard",keySet:"ui-keyboard-keyset",keyButton:"ui-keyboard-button",keyWide:"ui-keyboard-widekey",keyPrefix:"ui-keyboard-",keyText:"ui-keyboard-text",keyHasActive:"ui-keyboard-hasactivestate",keyAction:"ui-keyboard-actionkey",keySpacer:"ui-keyboard-spacer",keyToggle:"ui-keyboard-toggle",keyDisabled:"ui-keyboard-disabled",divWrapperCE:"ui-keyboard-div-wrapper",locked:"ui-keyboard-lockedinput",alwaysOpen:"ui-keyboard-always-open",noKeyboard:"ui-keyboard-nokeyboard",placeholder:"ui-keyboard-placeholder",hasFocus:"ui-keyboard-has-focus",isCurrent:"ui-keyboard-input-current",inputValid:"ui-keyboard-valid-input",inputInvalid:"ui-keyboard-invalid-input",inputAutoAccepted:"ui-keyboard-autoaccepted",endRow:"ui-keyboard-button-endrow"},f.events={kbChange:"keyboardChange",kbBeforeClose:"beforeClose",kbBeforeVisible:"beforeVisible",kbVisible:"visible",kbInit:"initialized",kbInactive:"inactive",kbHidden:"hidden",kbRepeater:"repeater",kbKeysetChange:"keysetChange",inputAccepted:"accepted",inputCanceled:"canceled",inputChange:"change",inputRestricted:"restricted"},f.keyaction={accept:function(e){return e.close(!0),!1},alt:function(e){e.altActive=!e.altActive,e.showSet()},bksp:function(e){e.isContentEditable?(e.execCommand("delete"),e.saveCaret()):e.insertText("\b")},cancel:function(e){return e.close(),!1},clear:function(e){e.$preview[e.isContentEditable?"text":"val"](""),e.$decBtn.length&&e.checkDecimal()},combo:function(e){var t=e.options,i=!t.useCombos,n=e.$keyboard.find("."+f.css.keyPrefix+"combo");return t.useCombos=i,n.toggleClass(t.css.buttonActive,i).attr("title",n.attr("data-title")+" ("+t.display[i?"active":"disabled"]+")"),i&&e.checkCombos(),!1},dec:function(e){e.insertText(e.decimal?".":",")},del:function(e){e.isContentEditable?e.execCommand("forwardDelete"):e.insertText("{d}")},default:function(e){e.shiftActive=e.altActive=e.metaActive=!1,e.showSet()},enter:function(e,t,i){var n=e.options;return i.shiftKey?n.enterNavigation?e.switchInput(!i[n.enterMod],!0):e.close(!0):!n.enterNavigation||e.isTextArea&&!i[n.enterMod]?(e.isTextArea&&A(i.target).closest("button").length&&e.insertText((f.msie?" ":"")+"\n"),void(e.isContentEditable&&!n.enterNavigation&&(e.execCommand("insertHTML",'<div><br class="'+f.css.divWrapperCE+'"></div>'),setTimeout(function(){f.keyaction.right(e),e.saveCaret()},0)))):e.switchInput(!i[n.enterMod],!!n.autoAccept&&"true")},lock:function(e){e.last.keyset[0]=e.shiftActive=e.capsLock=!e.capsLock,e.showSet()},left:function(e){var t=f.caret(e.$preview);0<=t.start-1&&(e.last.start=e.last.end=t.start-1,f.caret(e.$preview,e.last),e.setScroll())},meta:function(e,t){var i=A(t);e.metaActive=!i.hasClass(e.options.css.buttonActive),e.showSet(i.attr("data-name"))},next:function(e){return e.switchInput(!0,e.options.autoAccept),!1},normal:function(e){e.shiftActive=e.altActive=e.metaActive=!1,e.showSet()},prev:function(e){return e.switchInput(!1,e.options.autoAccept),!1},right:function(e){var t=f.caret(e.$preview),i=e.isContentEditable?f.getEditableLength(e.el):e.getValue().length;t.end+1<=i&&(e.last.start=e.last.end=t.end+1,f.caret(e.$preview,e.last),e.setScroll())},shift:function(e){e.last.keyset[0]=e.shiftActive=!e.shiftActive,e.showSet()},sign:function(e){if(/^[+-]?\d*\.?\d*$/.test(e.getValue())){var t,i=f.caret(e.$preview),n=e.getValue(),o=e.isContentEditable?f.getEditableLength(e.el):n.length;e.setValue(-1*n),t=o-n.length,e.last.start=i.start+t,e.last.end=i.end+t,f.caret(e.$preview,e.last),e.setScroll()}},space:function(e){e.insertText(" ")},tab:function(e){var t=e.options;if(!e.isTextArea){if(t.tabNavigation)return e.switchInput(!e.shiftActive,!0);if(e.isInput)return!1}e.insertText("\t")},toggle:function(e){e.enabled=!e.enabled,e.toggle()},NBSP:" ",ZWSP:"​",ZWNJ:"‌",ZWJ:"‍",LRM:"‎",RLM:"‏"},f.builtLayouts={},f.layouts={alpha:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} a b c d e f g h i j [ ] \\","k l m n o p q r s ; ' {enter}","{shift} t u v w x y z , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} A B C D E F G H I J { } |",'K L M N O P Q R S : " {enter}',"{shift} T U V W X Y Z < > ? {shift}","{accept} {space} {cancel}"]},qwerty:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}","{accept} {space} {cancel}"]},international:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}","{accept} {alt} {space} {alt} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}","{accept} {alt} {space} {alt} {cancel}"],alt:["~ ¡ ² ³ ¤ € ¼ ½ ¾ ‘ ’ ¥ × {bksp}","{tab} ä å é ® þ ü ú í ó ö « » ¬","á ß ð f g h j k ø ¶ ´ {enter}","{shift} æ x © v b ñ µ ç > ¿ {shift}","{accept} {alt} {space} {alt} {cancel}"],"alt-shift":["~ ¹ ² ³ £ € ¼ ½ ¾ ‘ ’ ¥ ÷ {bksp}","{tab} Ä Å É ® Þ Ü Ú Í Ó Ö « » ¦","Ä § Ð F G H J K Ø ° ¨ {enter}","{shift} Æ X ¢ V B Ñ µ Ç . ¿ {shift}","{accept} {alt} {space} {alt} {cancel}"]},colemak:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w f p g j l u y ; [ ] \\","{bksp} a r s t d h n e i o ' {enter}","{shift} z x c v b k m , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W F P G J L U Y : { } |",'{bksp} A R S T D H N E I O " {enter}',"{shift} Z X C V B K M < > ? {shift}","{accept} {space} {cancel}"]},dvorak:{normal:["` 1 2 3 4 5 6 7 8 9 0 [ ] {bksp}","{tab} ' , . p y f g c r l / = \\","a o e u i d h t n s - {enter}","{shift} ; q j k x b m w v z {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) { } {bksp}",'{tab} " < > P Y F G C R L ? + |',"A O E U I D H T N S _ {enter}","{shift} : Q J K X B M W V Z {shift}","{accept} {space} {cancel}"]},num:{normal:["= ( ) {b}","{clear} / * -","7 8 9 +","4 5 6 {sign}","1 2 3 %","0 {dec} {a} {c}"]}},f.language={en:{display:{a:"✔:Accept (Shift+Enter)",accept:"Accept:Accept (Shift+Enter)",alt:"Alt:⌥ AltGr",b:"⌫:Backspace",bksp:"Bksp:Backspace",c:"✖:Cancel (Esc)",cancel:"Cancel:Cancel (Esc)",clear:"C:Clear",combo:"ö:Toggle Combo Keys",dec:".:Decimal",e:"⏎:Enter",empty:" ",enter:"Enter:Enter ⏎",left:"←",lock:"Lock:⇪ Caps Lock",next:"Next ⇨",prev:"⇦ Prev",right:"→",s:"⇧:Shift",shift:"Shift:Shift",sign:"±:Change Sign",space:" :Space",t:"⇥:Tab",tab:"⇥ Tab:Tab",toggle:" ",valid:"valid",invalid:"invalid",active:"active",disabled:"disabled"},wheelMessage:"Use mousewheel to see other keys",comboRegex:/([`\'~\^\"ao])([a-z])/gim,combos:{"`":{a:"à",A:"À",e:"è",E:"È",i:"ì",I:"Ì",o:"ò",O:"Ò",u:"ù",U:"Ù",y:"ỳ",Y:"Ỳ"},"'":{a:"á",A:"Á",e:"é",E:"É",i:"í",I:"Í",o:"ó",O:"Ó",u:"ú",U:"Ú",y:"ý",Y:"Ý"},'"':{a:"ä",A:"Ä",e:"ë",E:"Ë",i:"ï",I:"Ï",o:"ö",O:"Ö",u:"ü",U:"Ü",y:"ÿ",Y:"Ÿ"},"^":{a:"â",A:"Â",e:"ê",E:"Ê",i:"î",I:"Î",o:"ô",O:"Ô",u:"û",U:"Û",y:"ŷ",Y:"Ŷ"},"~":{a:"ã",A:"Ã",e:"ẽ",E:"Ẽ",i:"ĩ",I:"Ĩ",o:"õ",O:"Õ",u:"ũ",U:"Ũ",y:"ỹ",Y:"Ỹ",n:"ñ",N:"Ñ"}}}},f.defaultOptions={language:null,rtl:!1,layout:"qwerty",customLayout:null,position:{of:null,my:"center top",at:"center top",at2:"center bottom"},reposition:!0,usePreview:!0,alwaysOpen:!1,initialFocus:!0,noFocus:!1,stayOpen:!1,userClosed:!1,ignoreEsc:!1,closeByClickEvent:!1,css:{input:"ui-widget-content ui-corner-all",container:"ui-widget-content ui-widget ui-corner-all ui-helper-clearfix",popup:"",buttonDefault:"ui-state-default ui-corner-all",buttonHover:"ui-state-hover",buttonAction:"ui-state-active",buttonActive:"ui-state-active",buttonDisabled:"ui-state-disabled",buttonEmpty:"ui-keyboard-empty"},autoAccept:!1,autoAcceptOnEsc:!1,lockInput:!1,restrictInput:!1,restrictInclude:"",acceptValid:!1,autoAcceptOnValid:!1,checkValidOnInit:!0,cancelClose:!0,tabNavigation:!1,enterNavigation:!1,enterMod:"altKey",stopAtEnd:!0,appendLocally:!1,appendTo:"body",wrapBRs:!0,stickyShift:!0,preventPaste:!1,caretToEnd:!1,scrollAdjustment:10,maxLength:!1,maxInsert:!0,repeatDelay:500,repeatRate:20,resetDefault:!0,openOn:"focus",activeOnReadonly:!1,keyBinding:"mousedown touchstart",useWheel:!0,useCombos:!0,validate:function(){return!0}},f.comboRegex=/([`\'~\^\"ao])([a-z])/gim,f.currentKeyboard="",A('\x3c!--[if lte IE 8]><script>jQuery("body").addClass("oldie");<\/script><![endif]--\x3e\x3c!--[if IE]><script>jQuery("body").addClass("ie");<\/script><![endif]--\x3e').appendTo("body").remove(),f.msie=A("body").hasClass("oldie"),f.allie=A("body").hasClass("ie"),f.watermark=void 0!==document.createElement("input").placeholder,f.checkCaretSupport=function(){if("boolean"!=typeof f.checkCaret){var e=A('<div style="height:0px;width:0px;overflow:hidden;position:fixed;top:0;left:-100px;"><input type="text" value="testing"/></div>').prependTo("body");f.caret(e.find("input"),3,3),f.checkCaret=3!==f.caret(e.find("input").hide().show()).start,e.remove()}return f.checkCaret},f.caret=function(e,t,i){if(!e||!e.length||e.is(":hidden")||"hidden"===e.css("visibility"))return{};var n,o,s,a,r=e.data("keyboard"),l=r&&r.options.noFocus,c=/(textarea|input)/i.test(e[0].nodeName);return l||e.focus(),void 0!==t?("object"===(void 0===t?"undefined":d(t))&&"start"in t&&"end"in t?(n=t.start,o=t.end):void 0===i&&(i=t),"number"==typeof t&&"number"==typeof i?(n=t,o=i):"start"===t?n=o=0:"string"==typeof t&&(n=o="end"),c?e.caret(n,o,l):f.setEditableCaret(e,n,o)):(a=c?e.caret():f.getEditableCaret(e[0]),n=a.start,o=a.end,s=c&&e[0].value||e.text()||"",{start:n,end:o,text:s.substring(n,o),replaceStr:function(e){return s.substring(0,n)+e+s.substring(o,s.length)}})},f.isTextNode=function(e){return e&&3===e.nodeType},f.isBlock=function(e,t){var i=e.ownerDocument.defaultView;return t&&1===t.nodeType&&t!==e&&"block"===i.getComputedStyle(t).display?1:0},f.wrapBRs=function(n){var e=A(n).find("br:not(."+f.css.divWrapperCE+")");e.length&&A.each(e,function(e,t){var i=t.parentNode.childNodes.length;1===i&&(1!==i||f.isBlock(n,t.parentNode))||A(t).addClass(f.css.divWrapperCE).wrap("<div>")})},f.getEditableCaret=function(l){if(!(l=A(l)[0]).isContentEditable)return{};var e,t,c=(A(l).data("keyboard")||{}).options,i=l.ownerDocument.getSelection().getRangeAt(0),n=s(i.startContainer,i.startOffset),o=n.position;function s(e,t){var i,n="",o=!1,s=0,a=A.makeArray(l.childNodes);function r(e){e&&(s+=e,n+=c&&c.replaceCR||"\n")}for(;!o&&a.length;){if((i=a.shift())===e&&(o=!0),r(f.isBlock(l,i.previousSibling)),f.isTextNode(i)){if(s+=o?t:i.length,n+=i.textContent,o)return{position:s,text:n}}else!o&&i.childNodes&&(a=A.makeArray(i.childNodes).concat(a));r(f.isTextNode(i.previousSibling)&&f.isBlock(l,i))}return{position:s,text:n}}return!1!==c.wrapBRs&&f.wrapBRs(l),t=i.endContainer===i.startContainer&&i.endOffset===i.startOffset?(e=o,""):(e=(n=s(i.endContainer,i.endOffset)).position,n.text.substring(o,e)),{start:o,end:e,text:t}},f.getEditableLength=function(e){var t=f.setEditableCaret(e,"getMax");return"number"==typeof t?t:null},f.setEditableCaret=function(p,e,t){if(!(p=A(p)[0]).isContentEditable)return{};var i=p.ownerDocument,n=i.createRange(),o=i.getSelection(),h=(A(p).data("keyboard")||{}).options,s=e,a=t,r="",l=c("getMax"===e?"end":e);function c(i){"end"===i?i=p.innerHTML.length:i<0&&(i=0);var e,t,n="",o=!1,s=0,a=0,r=0,l=A.makeArray(p.childNodes);function c(e){return n+=e?h&&h.replaceCR||"\n":"",0<e}function d(e){var t=s+e;return a=r,r+=e,0<=i-t?i-(s=t)<=0:i-t<=0}for(;!o&&l.length;)if(e=l.shift(),c(t=f.isBlock(p,e.previousSibling))&&d(t)&&(o=!0),c(t=f.isTextNode(e.previousSibling)&&f.isBlock(p,e))&&d(t)&&(o=!0),f.isTextNode(e)){if(n+=e.textContent,d(e.length))return{node:e,offset:t=i-s==0&&1<=s-a?e.length:i-s,position:i,text:n}}else!o&&e.childNodes&&(l=A.makeArray(e.childNodes).concat(l));return l.length?{node:e,offset:i-s,position:i,text:n}:{node:e,offset:e&&e.length||0,position:r,text:n}}if(l.node){if(s=l.position,"getMax"===e)return s;n.setStart(l.node,l.offset),void 0!==t&&t!==e&&(l=c(t)),l.node&&(a=l.position,n.setEnd(l.node,l.offset),r=s===a?"":l.text.substring(s,a)),o.removeAllRanges(),o.addRange(n)}return{start:s,end:a,text:r}},f.replaceContent=function(e,t){e=A(e)[0];for(var i,n,o,s=void 0===t?"undefined":d(t),a=f.getEditableCaret(e).start,r=0,l=[e];i=l.pop();)if(f.isTextNode(i))"function"===s?r<=a&&a<=r+i.length&&(i.textContent=t(i.textContent)):"string"===s&&(o=t.substring(r,r+i.length))!==i.textContent&&(i.textContent=o),r+=i.length;else if(i&&i.childNodes)for(n=i.childNodes.length;n--;)l.push(i.childNodes[n]);n=f.getEditableCaret(e),f.setEditableCaret(e,n.start,n.start)},A.fn.keyboard=function(e){return this.each(function(){A(this).data("keyboard")||new A.keyboard(this,e)})},A.fn.getkeyboard=function(){return this.data("keyboard")},A.fn.caret=function(t,i,e){if(void 0===this[0]||this.is(":hidden")||"hidden"===this.css("visibility")||!/(INPUT|TEXTAREA)/i.test(this[0].nodeName))return this;var n,o,s,a,r,l=this,c=l[0],d=c.ownerDocument.selection,p=c.scrollTop,h=!1,u=!0;try{h="selectionStart"in c}catch(e){u=!1}return u&&void 0!==t?(/(email|number)/i.test(c.type)||(h?(c.selectionStart=t,c.selectionEnd=i):((n=c.createTextRange()).collapse(!0),n.moveStart("character",t),n.moveEnd("character",i-t),n.select())),e||!l.is(":visible")&&"hidden"===l.css("visibility")||c.focus(),c.scrollTop=p,this):(/(email|number)/i.test(c.type)?t=i=l.val().length:h?(t=c.selectionStart,i=c.selectionEnd):d?i="TEXTAREA"===c.nodeName.toUpperCase()?(r=l.val(),(s=(o=d.createRange()).duplicate()).moveToElementText(c),s.setEndPoint("EndToEnd",o),(t=s.text.replace(/\r/g,"\n").length)+o.text.replace(/\r/g,"\n").length):(r=l.val().replace(/\r/g,"\n"),(o=d.createRange().duplicate()).moveEnd("character",r.length),t=""===o.text?r.length:r.lastIndexOf(o.text),(o=d.createRange().duplicate()).moveStart("character",-r.length),o.text.length):t=i=(c.value||"").length,a=c.value||"",{start:t,end:i,text:a.substring(t,i),replace:function(e){return a.substring(0,t)+e+a.substring(i,a.length)}})},f},"object"===d(e)&&"object"===d(e.exports)?e.exports=t(o):t(jQuery)}),t(function(e){var t,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t=function(o){o.fn.addTyping=function(e){var t={showTyping:!0,lockTypeIn:!1,delay:250,hoverDelay:250},A=o.keyboard;return this.each(function(){var h,u=o(this).data("keyboard");u&&(h=u.typing_options=o.extend({},t,e),u.typing_keymap={" ":"space",'"':"34","'":"39","&nbsp;":"space","\b":"bksp","{b}":"bksp","{d}":"del","{l}":"left","{r}":"right","\n":"enter","\r":"enter","{e}":"enter","\t":"tab","{t}":"tab"},u.typing_xref={8:"bksp",9:"tab",13:"enter",32:"space",37:"left",39:"right",46:"del"},u.typing_event=!1,u.typing_namespace=u.namespace+"typing",u.extensionNamespace.push(u.typing_namespace),h.savedLockInput=u.options.lockInput,u.typing_setup_reset=function(){var e=A.events,t=u.typing_namespace,i=[e.kbHidden,e.kbInactive,""].join(t+" ");u.$el.unbind(t).bind(i,function(){u.typing_reset()}),u.unbindButton(t).bindButton("mousedown"+t,function(){u.typing_reset()})},u.typing_setup=function(){var e=u.typing_namespace;u.typing_setup_reset(),u.$el.bind(A.events.kbBeforeVisible+e,function(){u.typing_setup()}),u.$preview.unbind(e).bind("keyup"+e,function(e){return!(h.init&&h.lockTypeIn||!h.showTyping)&&(37<=e.which&&e.which<=40?void 0:(16===e.which&&(u.shiftActive=!1),18===e.which&&(u.altActive=!1),16===e.which||18===e.which?(u.showSet(),void setTimeout(function(){u.$preview&&u.$preview.focus()},200)):void 0))}).bind("keydown"+e,function(e){if(h.init&&h.lockTypeIn||!h.showTyping)return!1;e.temp=!1,16===e.which&&(e.temp=!u.shiftActive,u.shiftActive=!0),18===e.which&&(e.temp=!u.altActive,u.altActive=!0),e.temp&&(u.showSet(),u.$preview.focus()),u.typing_event=!0,u.typing_xref[e.which]&&u.typing_findKey("",e)}).bind("keypress"+e,function(e){if(h.init&&h.lockTypeIn)return!1;u.typing_event&&!u.options.lockInput&&(u.typing_reset(),u.typing_event=!0,u.typing_findKey("",e))})},u.typing_reset=function(){u.typing_event=h.init=!1,h.text="",h.len=h.current=0,u.options.lockInput=h.savedLockInput},u.typeIn=function(e,t,i,n){if(!u.isVisible())return clearTimeout(u.typing_timer),void u.typing_reset();if(u.typing_event){if(void 0===e)return u.typing_event=!1,void(u.options.lockInput=h.savedLockInput)}else!0!==h.init&&(h.init=!0,u.options.lockInput=h.lockTypeIn,h.text=e||h.text||"",h.len=h.text.length,h.delay=t||h.delay,h.current=0,i&&(h.callback=i)),"{"===(e=h.text.substring(h.current,++h.current))&&"}"===h.text.substring(h.current+1,h.current+2)&&(e+=h.text.substring(h.current,h.current+=2)),u.typing_findKey(e,n)},u.typing_findKey=function(e,t){var i,n,o,s,a,r,l,c,d=A.css,p=A.builtLayouts[u.layout].mappedKeys;if(u.isOpen&&u.$keyboard.length)if(r=u.$keyboard.find("."+d.keySet),s=e in u.typing_keymap?u.typing_keymap[e]:e,i="."+d.keyButton+'[data-action="'+s+'"]',u.typing_event&&t&&(i="keypress"!==t.type&&u.typing_xref.hasOwnProperty(t.keyCode||t.which)?"."+d.keyPrefix+u.processName(u.typing_xref[t.keyCode||t.which]):(n=String.fromCharCode(t.charCode||t.which),p.hasOwnProperty(n)?"."+d.keyButton+'[data-value="'+p[n].replace(/"/g,'\\"')+'"]':"."+d.keyPrefix+u.processName(n))),(a=r.filter(":visible").find(i)).length?u.typing_simulateKey(a,e,t):(c=(a=u.typing_event?r.find(i):(o=e in u.typing_keymap?u.typing_keymap[e]:u.processName(e),r.find("."+d.keyPrefix+o))).closest("."+d.keySet)).attr("name")?(h.showTyping&&(l=c.attr("name"),u.shiftActive=/shift/.test(l),u.altActive=/alt/.test(l),u.metaActive=u.last.keyset[2]=!!/\bmeta/.test(l)&&l.match(/meta[\w-]+/)[0],u.showSet(u.metaActive)),u.typing_simulateKey(a,e,t)):u.typing_event||(e in u.typing_keymap&&u.typing_keymap[e]in A.keyaction?A.keyaction[u.typing_keymap[e]](u,a,t):u.insertText(e),u.checkCombos(),u.$el.trigger(A.events.kbChange,[u,u.el])),h.current<=h.len&&0!==h.len){if(!u.isVisible())return;u.typing_timer=setTimeout(function(){u.typeIn()},h.delay)}else{if(0!==h.len)return u.typing_reset(),void("function"==typeof h.callback&&(u.typing_timer=setTimeout(function(){"function"==typeof h.callback&&h.callback(u)},h.delay)));u.typing_reset()}},u.typing_simulateKey=function(e,t,i){var n=e.length;u.isVisible()&&(h.showTyping&&n&&(e.filter(":visible").trigger("mouseenter"+u.namespace),h.showTyping&&n&&setTimeout(function(){e.trigger("mouseleave"+u.namespace)},Math.min(h.hoverDelay,h.delay))),u.typing_event||setTimeout(function(){t in u.typing_keymap&&u.typing_keymap[t]in A.keyaction?((i=i||o.Event("keypress")).target=e,A.keyaction[u.typing_keymap[t]](u,e,i)):u.insertText(t),u.checkCombos(),u.$el.trigger(A.events.kbChange,[u,u.el])},h.delay/3))},h.showTyping&&u.options.alwaysOpen&&u.isVisible()?u.typing_setup():u.$el.unbind(A.events.kbBeforeVisible+u.typing_namespace).bind(A.events.kbBeforeVisible+u.typing_namespace,function(){h.showTyping?u.typing_setup():u.typing_setup_reset()}))})}},"object"===i(e)&&"object"===i(e.exports)?e.exports=t(o):t(jQuery)}),t(function(i){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){if("object"===n(i)&&i.exports){var t=o;i.exports=e(t)}else e(jQuery)}(function(e){if(void 0===e)throw new Error("jQuery.textcomplete requires jQuery");var s,a,r,n,o,l,c,d,t,p,h,u,A,f,g,i,m,y,b;function v(e,t){if(this.$el=r(e),this.id="textcomplete"+c++,this.strategies=[],this.views=[],this.option=r.extend({},v.defaults,t),!(this.$el.is("input[type=text]")||this.$el.is("input[type=search]")||this.$el.is("textarea")||e.isContentEditable||"true"==e.contentEditable))throw new Error("textcomplete must be called on a Textarea or a ContentEditable.");if(e===e.ownerDocument.activeElement)this.initialize();else{var i=this;this.$el.one("focus."+this.id,function(){i.initialize()}),this.option.adapter&&"CKEditor"!=this.option.adapter||"undefined"==typeof CKEDITOR||!this.$el.is("textarea")||CKEDITOR.on("instanceReady",function(t){-1==r.inArray(t.editor.id,d)&&(d.push(t.editor.id),t.editor.on("focus",function(e){i.$el=r(t.editor.editable().$),i.option.adapter||(i.option.adapter=r.fn.textcomplete.CKEditor),i.option.ckeditor_instance=t.editor,i.initialize()}))})}}function w(e){t.extend(this,e),this.cache&&(this.search=function(e){var n={};return function(t,i){n[t]?i(n[t]):e.call(this,t,function(e){n[t]=(n[t]||[]).concat(e),i.apply(null,arguments)})}}(this.search))}function k(){}function C(e,t,i){this.initialize(e,t,i)}function x(e,t,i){this.initialize(e,t,i),A("<span>吶</span>").css({position:"absolute",top:-9999,left:-9999}).insertBefore(e)}function _(e,t,i){this.initialize(e,t,i)}function E(e,t,i){this.initialize(e,t,i)}return a=1,(s=e).fn.textcomplete=function(t,n){var o=Array.prototype.slice.call(arguments);return this.each(function(){var e=s(this),i=e.data("textComplete");if(i||((n=n||{})._oid=a++,i=new s.fn.textcomplete.Completer(this,n),e.data("textComplete",i)),"string"==typeof t){if(!i)return;o.shift(),i[t].apply(i,o),"destroy"===t&&e.removeData("textComplete")}else s.each(t,function(t){s.each(["header","footer","placement","maxCount"],function(e){t[e]&&(i.option[e]=t[e],function(e){console.warn&&console.warn(e)}(e+"as a strategy param is deprecated. Use option."),delete t[e])})}),i.register(s.fn.textcomplete.Strategy.parse(t,{el:this,$el:e}))})},r=e,c=0,d=[],v.defaults={appendTo:"body",className:"",dropdownClassName:"dropdown-menu textcomplete-dropdown",maxCount:10,zIndex:"100",rightEdgeOffset:30},r.extend(v.prototype,{id:null,option:null,strategies:null,adapter:null,dropdown:null,$el:null,$iframe:null,initialize:function(){var e,t,i=this.$el.get(0);if(this.$el.prop("ownerDocument")!==document&&window.frames.length)for(var n=0;n<window.frames.length;n++)if(this.$el.prop("ownerDocument")===window.frames[n].document){this.$iframe=r(window.frames[n].frameElement);break}this.dropdown=new r.fn.textcomplete.Dropdown(i,this,this.option),e=this.option.adapter?this.option.adapter:(t=this.$el.is("textarea")||this.$el.is("input[type=text]")||this.$el.is("input[type=search]")?"number"==typeof i.selectionEnd?"Textarea":"IETextarea":"ContentEditable",r.fn.textcomplete[t]),this.adapter=new e(i,this,this.option)},destroy:function(){this.$el.off("."+this.id),this.adapter&&this.adapter.destroy(),this.dropdown&&this.dropdown.destroy(),this.$el=this.adapter=this.dropdown=null},deactivate:function(){this.dropdown&&this.dropdown.deactivate()},trigger:function(e,t){this.dropdown||this.initialize(),null!=e||(e=this.adapter.getTextFromHeadToCaret());var i=this._extractSearchQuery(e);if(i.length){var n=i[1];if(t&&this._term===n&&""!==n)return;this._term=n,this._search.apply(this,i)}else this._term=null,this.dropdown.deactivate()},fire:function(e){var t=Array.prototype.slice.call(arguments,1);return this.$el.trigger(e,t),this},register:function(e){Array.prototype.push.apply(this.strategies,e)},select:function(e,t,i){" "===i.key&&(e+=" "),this._term=null,this.adapter.select(e,t,i),this.fire("change").fire("textComplete:select",e,t),this.adapter.focus()},_clearAtNext:!0,_term:null,_extractSearchQuery:function(e){for(var t=0;t<this.strategies.length;t++){var i=this.strategies[t],n=i.context(e);if(n||""===n){var o=r.isFunction(i.match)?i.match(e):i.match;a=n,"[object String]"===Object.prototype.toString.call(a)&&(e=n);var s=e.match(o);if(s)return[i,s[i.index],s]}}var a;return[]},_search:(n=function(i,n,o,e){var s=this;n.search(o,function(e,t){s.dropdown.shown||s.dropdown.activate(),s._clearAtNext&&(s.dropdown.clear(),s._clearAtNext=!1),s.dropdown.setPosition(s.adapter.getCaretPosition()),s.dropdown.render(s._zip(e,n,o)),t||(i(),s._clearAtNext=!0)},e)},function(){var e=Array.prototype.slice.call(arguments);if(o)l=e;else{o=!0;var i=this;e.unshift(function e(){if(l){var t=l;l=void 0,t.unshift(e),n.apply(i,t)}else o=!1}),n.apply(this,e)}}),_zip:function(e,t,i){return r.map(e,function(e){return{value:e,strategy:t,term:i}})}}),r.fn.textcomplete.Completer=v,function(o){function s(e,t){var i,n,o=t.strategy.idProperty;for(i=0;i<e.length;i++)if((n=e[i]).strategy===t.strategy)if(o){if(n.value[o]===t.value[o])return!0}else if(n.value===t.value)return!0;return!1}var a=o(window),r={};o(document).on("click",function(e){var i=e.originalEvent&&e.originalEvent.keepTextCompleteDropdown;o.each(r,function(e,t){e!==i&&t.deactivate()})});var i={SKIP_DEFAULT:0,KEY_UP:1,KEY_DOWN:2,KEY_ENTER:3,KEY_PAGEUP:4,KEY_PAGEDOWN:5,KEY_ESCAPE:6,KEY_SPACE:7};function l(e,t,i){this.$el=l.createElement(i),this.completer=t,this.id=t.id+"dropdown",this._data=[],this.$inputEl=o(e),(this.option=i).listPosition&&(this.setPosition=i.listPosition),i.height&&this.$el.height(i.height);var n=this;o.each(["maxCount","placement","footer","header","noResultsMessage","className"],function(e,t){null!=i[t]&&(n[t]=i[t])}),this._bindEvents(e),r[this.id]=this}o.extend(l,{createElement:function(e){var t=e.appendTo;return t instanceof o||(t=o(t)),o("<ul></ul>").addClass(e.dropdownClassName).attr("id","textcomplete-dropdown-"+e._oid).css({display:"none",left:0,position:"absolute",zIndex:e.zIndex}).appendTo(t)}}),o.extend(l.prototype,{$el:null,$inputEl:null,completer:null,footer:null,header:null,id:null,maxCount:null,placement:"",shown:!1,data:[],className:"",destroy:function(){this.deactivate(),this.$el.off("."+this.id),this.$inputEl.off("."+this.id),this.clear(),this.$el.remove(),this.$el=this.$inputEl=this.completer=null,delete r[this.id]},render:function(e){var t=this._buildContents(e),i=o.map(e,function(e){return e.value});if(e.length){var n=e[0].strategy;n.id?this.$el.attr("data-strategy",n.id):this.$el.removeAttr("data-strategy"),this._renderHeader(i),this._renderFooter(i),t&&(this._renderContents(t),this._fitToBottom(),this._fitToRight(),this._activateIndexedItem()),this._setScroll()}else this.noResultsMessage?this._renderNoResultsMessage(i):this.shown&&this.deactivate()},setPosition:function(e){var t="absolute";return this.$inputEl.add(this.$inputEl.parents()).each(function(){return"absolute"!==o(this).css("position")&&("fixed"===o(this).css("position")?(e.top-=a.scrollTop(),e.left-=a.scrollLeft(),!(t="fixed")):void 0)}),this.$el.css(this._applyPlacement(e)),this.$el.css({position:t}),this},clear:function(){this.$el.html(""),this.data=[],this._index=0,this._$header=this._$footer=this._$noResultsMessage=null},activate:function(){return this.shown||(this.clear(),this.$el.show(),this.className&&this.$el.addClass(this.className),this.completer.fire("textComplete:show"),this.shown=!0),this},deactivate:function(){return this.shown&&(this.$el.hide(),this.className&&this.$el.removeClass(this.className),this.completer.fire("textComplete:hide"),this.shown=!1),this},isUp:function(e){return 38===e.keyCode||e.ctrlKey&&80===e.keyCode},isDown:function(e){return 40===e.keyCode||e.ctrlKey&&78===e.keyCode},isEnter:function(e){return!(e.ctrlKey||e.altKey||e.metaKey||e.shiftKey)&&(13===e.keyCode||9===e.keyCode||32===e.keyCode)},isPageup:function(e){return 33===e.keyCode},isPagedown:function(e){return 34===e.keyCode},isEscape:function(e){return 27===e.keyCode},_data:null,_index:null,_$header:null,_$noResultsMessage:null,_$footer:null,_bindEvents:function(){this.$el.on("mousedown."+this.id,".textcomplete-item",o.proxy(this._onClick,this)),this.$el.on("touchstart."+this.id,".textcomplete-item",o.proxy(this._onClick,this)),this.$el.on("mouseover."+this.id,".textcomplete-item",o.proxy(this._onMouseover,this)),this.$inputEl.on("keydown."+this.id,o.proxy(this._onKeydown,this))},_onClick:function(e){var t=o(e.target);e.preventDefault(),e.originalEvent.keepTextCompleteDropdown=this.id,t.hasClass("textcomplete-item")||(t=t.closest(".textcomplete-item"));var i=this.data[parseInt(t.data("index"),10)];this.completer.select(i.value,i.strategy,e);var n=this;setTimeout(function(){n.deactivate(),"touchstart"===e.type&&n.$inputEl.focus()},0)},_onMouseover:function(e){var t=o(e.target);e.preventDefault(),t.hasClass("textcomplete-item")||(t=t.closest(".textcomplete-item")),this._index=parseInt(t.data("index"),10),this._activateIndexedItem()},_onKeydown:function(e){var t;if(this.shown)switch(o.isFunction(this.option.onKeydown)&&(t=this.option.onKeydown(e,i)),null==t&&(t=this._defaultKeydown(e)),t){case i.KEY_UP:e.preventDefault(),this._up();break;case i.KEY_DOWN:e.preventDefault(),this._down();break;case i.KEY_ENTER:case i.KEY_SPACE:e.preventDefault(),this._enter(e);break;case i.KEY_PAGEUP:e.preventDefault(),this._pageup();break;case i.KEY_PAGEDOWN:e.preventDefault(),this._pagedown();break;case i.KEY_ESCAPE:e.preventDefault(),this.deactivate()}},_defaultKeydown:function(e){return this.isUp(e)?i.KEY_UP:this.isDown(e)?i.KEY_DOWN:this.isEnter(e)?i.KEY_ENTER:this.isPageup(e)?i.KEY_PAGEUP:this.isPagedown(e)?i.KEY_PAGEDOWN:this.isEscape(e)?i.KEY_ESCAPE:void 0},_up:function(){0===this._index?this._index=this.data.length-1:this._index-=1,this._activateIndexedItem(),this._setScroll()},_down:function(){this._index===this.data.length-1?this._index=0:this._index+=1,this._activateIndexedItem(),this._setScroll()},_enter:function(e){var t=this.data[parseInt(this._getActiveElement().data("index"),10)];e.keyCode&&32===e.keyCode&&(t=this.data[0]),this.completer.select(t.value,t.strategy,e),this.deactivate()},_pageup:function(){var t=0,i=this._getActiveElement().position().top-this.$el.innerHeight();this.$el.children().each(function(e){if(o(this).position().top+o(this).outerHeight()>i)return t=e,!1}),this._index=t,this._activateIndexedItem(),this._setScroll()},_pagedown:function(){var t=this.data.length-1,i=this._getActiveElement().position().top+this.$el.innerHeight();this.$el.children().each(function(e){if(o(this).position().top>i)return t=e,!1}),this._index=t,this._activateIndexedItem(),this._setScroll()},_activateIndexedItem:function(){this.$el.find(".textcomplete-item.active").removeClass("active"),this._getActiveElement().addClass("active")},_getActiveElement:function(){return this.$el.children(".textcomplete-item:nth("+this._index+")")},_setScroll:function(){var e=this._getActiveElement(),t=e.position().top,i=e.outerHeight(),n=this.$el.innerHeight(),o=this.$el.scrollTop();0===this._index||this._index==this.data.length-1||t<0?this.$el.scrollTop(t+o):n<t+i&&this.$el.scrollTop(t+i+o-n)},_buildContents:function(e){var t,i,n,o="";for(i=0;i<e.length&&this.data.length!==this.maxCount;i++)t=e[i],s(this.data,t)||(n=this.data.length,this.data.push(t),o+='<li class="textcomplete-item" data-index="'+n+'"><a>',o+=t.strategy.template(t.value,t.term),o+="</a></li>");return o},_renderHeader:function(e){if(this.header){this._$header||(this._$header=o('<li class="textcomplete-header"></li>').prependTo(this.$el));var t=o.isFunction(this.header)?this.header(e):this.header;this._$header.html(t)}},_renderFooter:function(e){if(this.footer){this._$footer||(this._$footer=o('<li class="textcomplete-footer"></li>').appendTo(this.$el));var t=o.isFunction(this.footer)?this.footer(e):this.footer;this._$footer.html(t)}},_renderNoResultsMessage:function(e){if(this.noResultsMessage){this._$noResultsMessage||(this._$noResultsMessage=o('<li class="textcomplete-no-results-message"></li>').appendTo(this.$el));var t=o.isFunction(this.noResultsMessage)?this.noResultsMessage(e):this.noResultsMessage;this._$noResultsMessage.html(t)}},_renderContents:function(e){this._$footer?this._$footer.before(e):this.$el.append(e)},_fitToBottom:function(){var e=a.scrollTop()+a.height(),t=this.$el.height();this.$el.position().top+t>e&&(this.completer.$iframe||this.$el.offset({top:e-t}))},_fitToRight:function(){for(var e,t=this.option.rightEdgeOffset,i=this.$el.offset().left,n=this.$el.width(),o=a.width()-t;o<i+n&&(this.$el.offset({left:i-t}),!(i<=(e=this.$el.offset().left)));)i=e},_applyPlacement:function(e){return-1!==this.placement.indexOf("top")?e={top:"auto",bottom:this.$el.parent().height()-e.top+e.lineHeight,left:e.left}:(e.bottom="auto",delete e.lineHeight),-1!==this.placement.indexOf("absleft")?e.left=0:-1!==this.placement.indexOf("absright")&&(e.right=0,e.left="auto"),e}}),o.fn.textcomplete.Dropdown=l,o.extend(o.fn.textcomplete,i)}(e),t=e,w.parse=function(e,i){return t.map(e,function(e){var t=new w(e);return t.el=i.el,t.$el=i.$el,t})},t.extend(w.prototype,{match:null,replace:null,search:null,id:null,cache:!1,context:function(){return!0},index:2,template:function(e){return e},idProperty:null}),t.fn.textcomplete.Strategy=w,p=e,h=Date.now||function(){return(new Date).getTime()},p.extend(k.prototype,{id:null,completer:null,el:null,$el:null,option:null,initialize:function(e,t,i){this.el=e,this.$el=p(e),this.id=t.id+this.constructor.name,this.completer=t,this.option=i,this.option.debounce&&(this._onKeyup=function(t,i){function n(){var e=h()-r;e<i?o=setTimeout(n,i-e):(o=null,l=t.apply(a,s),a=s=null)}var o,s,a,r,l;return function(){return a=this,s=arguments,r=h(),o=o||setTimeout(n,i),l}}(this._onKeyup,this.option.debounce)),this._bindEvents()},destroy:function(){this.$el.off("."+this.id),this.$el=this.el=this.completer=null},select:function(){throw new Error("Not implemented")},getCaretPosition:function(){var e=this._getCaretRelativePosition(),t=this.$el.offset(),i=this.option.appendTo;if(i){i instanceof p||(i=p(i));var n=i.offsetParent().offset();t.top-=n.top,t.left-=n.left}return e.top+=t.top,e.left+=t.left,e},focus:function(){this.$el.focus()},_bindEvents:function(){this.$el.on("keyup."+this.id,p.proxy(this._onKeyup,this))},_onKeyup:function(e){this._skipSearch(e)||this.completer.trigger(this.getTextFromHeadToCaret(),!0)},_skipSearch:function(e){switch(e.keyCode){case 9:case 13:case 16:case 17:case 18:case 33:case 34:case 40:case 38:case 27:return!0}if(e.ctrlKey)switch(e.keyCode){case 78:case 80:return!0}}}),p.fn.textcomplete.Adapter=k,(u=e).extend(C.prototype,u.fn.textcomplete.Adapter.prototype,{select:function(e,t,i){var n,o=this.getTextFromHeadToCaret(),s=this.el.value.substring(this.el.selectionEnd),a=t.replace(e,i);void 0!==a&&(u.isArray(a)&&(s=a[1]+s,a=a[0]),n=u.isFunction(t.match)?t.match(o):t.match,o=o.replace(n,a),this.$el.val(o+s),this.el.selectionStart=this.el.selectionEnd=o.length)},getTextFromHeadToCaret:function(){return this.el.value.substring(0,this.el.selectionEnd)},_getCaretRelativePosition:function(){var e=u.fn.textcomplete.getCaretCoordinates(this.el,this.el.selectionStart);return{top:e.top+this._calculateLineHeight()-this.$el.scrollTop(),left:e.left-this.$el.scrollLeft(),lineHeight:this._calculateLineHeight()}},_calculateLineHeight:function(){var e=parseInt(this.$el.css("line-height"),10);if(isNaN(e)){var t=this.el.parentNode,i=document.createElement(this.el.nodeName),n=this.el.style;i.setAttribute("style","margin:0px;padding:0px;font-family:"+n.fontFamily+";font-size:"+n.fontSize),i.innerHTML="test",t.appendChild(i),e=i.clientHeight,t.removeChild(i)}return e}}),u.fn.textcomplete.Textarea=C,(A=e).extend(x.prototype,A.fn.textcomplete.Textarea.prototype,{select:function(e,t,i){var n,o=this.getTextFromHeadToCaret(),s=this.el.value.substring(o.length),a=t.replace(e,i);if(void 0!==a){A.isArray(a)&&(s=a[1]+s,a=a[0]),n=A.isFunction(t.match)?t.match(o):t.match,o=o.replace(n,a),this.$el.val(o+s),this.el.focus();var r=this.el.createTextRange();r.collapse(!0),r.moveEnd("character",o.length),r.moveStart("character",o.length),r.select()}},getTextFromHeadToCaret:function(){this.el.focus();var e=document.selection.createRange();e.moveStart("character",-this.el.value.length);var t=e.text.split("吶");return 1===t.length?t[0]:t[1]}}),A.fn.textcomplete.IETextarea=x,(f=e).extend(_.prototype,f.fn.textcomplete.Adapter.prototype,{select:function(e,t,i){var n=this.getTextFromHeadToCaret(),o=this.el.ownerDocument.getSelection(),s=o.getRangeAt(0),a=s.cloneRange();a.selectNodeContents(s.startContainer);var r,l=a.toString().substring(s.startOffset),c=t.replace(e,i);if(void 0!==c){f.isArray(c)&&(l=c[1]+l,c=c[0]),r=f.isFunction(t.match)?t.match(n):t.match,n=n.replace(r,c).replace(/ $/,"&nbsp"),s.selectNodeContents(s.startContainer),s.deleteContents();var d=this.el.ownerDocument.createElement("div");d.innerHTML=n;var p=this.el.ownerDocument.createElement("div");p.innerHTML=l;for(var h,u,A=this.el.ownerDocument.createDocumentFragment();h=d.firstChild;)u=A.appendChild(h);for(;h=p.firstChild;)A.appendChild(h);s.insertNode(A),s.setStartAfter(u),s.collapse(!0),o.removeAllRanges(),o.addRange(s)}},_getCaretRelativePosition:function(){var e=this.el.ownerDocument.getSelection().getRangeAt(0).cloneRange(),t=e.endContainer.parentNode,i=this.el.ownerDocument.createElement("span");e.insertNode(i),e.selectNodeContents(i),e.deleteContents(),setTimeout(function(){t.normalize()},0);var n=f(i),o=n.offset();if(o.left-=this.$el.offset().left,o.top+=n.height()-this.$el.offset().top,o.lineHeight=n.height(),this.completer.$iframe){var s=this.completer.$iframe.offset();o.top+=s.top,o.left+=s.left,o.top-=f(this.completer.$iframe[0].contentWindow.document).scrollTop()}return n.remove(),o},getTextFromHeadToCaret:function(){var e=this.el.ownerDocument.getSelection().getRangeAt(0),t=e.cloneRange();return t.selectNodeContents(e.startContainer),t.toString().substring(0,e.startOffset)}}),f.fn.textcomplete.ContentEditable=_,(g=e).extend(E.prototype,g.fn.textcomplete.ContentEditable.prototype,{_bindEvents:function(){var i=this;this.option.ckeditor_instance.on("key",function(e){var t=e.data;if(i._onKeyup(t),i.completer.dropdown.shown&&i._skipSearch(t))return!1},null,null,1),this.$el.on("keyup."+this.id,g.proxy(this._onKeyup,this))}}),g.fn.textcomplete.CKEditor=E,i=e,m=["direction","boxSizing","width","height","overflowX","overflowY","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","fontStyle","fontVariant","fontWeight","fontStretch","fontSize","fontSizeAdjust","lineHeight","fontFamily","textAlign","textTransform","textIndent","textDecoration","letterSpacing","wordSpacing","tabSize","MozTabSize"],y="undefined"!=typeof window,b=y&&null!=window.mozInnerScreenX,i.fn.textcomplete.getCaretCoordinates=function(e,t,i){if(!y)throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");var n=i&&i.debug||!1;if(n){var o=document.querySelector("#input-textarea-caret-position-mirror-div");o&&o.parentNode.removeChild(o)}var s=document.createElement("div");s.id="input-textarea-caret-position-mirror-div",document.body.appendChild(s);var a=s.style,r=window.getComputedStyle?getComputedStyle(e):e.currentStyle;a.whiteSpace="pre-wrap","INPUT"!==e.nodeName&&(a.wordWrap="break-word"),a.position="absolute",n||(a.visibility="hidden"),m.forEach(function(e){a[e]=r[e]}),b?e.scrollHeight>parseInt(r.height)&&(a.overflowY="scroll"):a.overflow="hidden",s.textContent=e.value.substring(0,t),"INPUT"===e.nodeName&&(s.textContent=s.textContent.replace(/\s/g," "));var l=document.createElement("span");l.textContent=e.value.substring(t)||".",s.appendChild(l);var c={top:l.offsetTop+parseInt(r.borderTopWidth),left:l.offsetLeft+parseInt(r.borderLeftWidth)};return n?l.style.backgroundColor="#aaa":document.body.removeChild(s),c},e})});var i=t(function(e,t){var i,n,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};i=s,n=function(){function e(e){this.opts=function(){for(var e=1;e<arguments.length;e++)for(var t in arguments[e])arguments[e].hasOwnProperty(t)&&(arguments[0][t]=arguments[e][t]);return arguments[0]}({},{onClose:null,onOpen:null,beforeOpen:null,beforeClose:null,stickyFooter:!1,footer:!1,cssClass:[],closeLabel:"Close",closeMethods:["overlay","button","escape"]},e),this.init()}function t(){this.modalBoxFooter&&(this.modalBoxFooter.style.width=this.modalBox.clientWidth+"px",this.modalBoxFooter.style.left=this.modalBox.offsetLeft+"px")}function i(){this._events={clickCloseBtn:this.close.bind(this),clickOverlay:function(e){-1!==this.opts.closeMethods.indexOf("overlay")&&!function(e,t){for(;(e=e.parentElement)&&!e.classList.contains(t););return e}(e.target,"tingle-modal")&&e.clientX<this.modal.clientWidth&&this.close()}.bind(this),resize:this.checkOverflow.bind(this),keyboardNav:function(e){-1!==this.opts.closeMethods.indexOf("escape")&&27===e.which&&this.isOpen()&&this.close()}.bind(this)},-1!==this.opts.closeMethods.indexOf("button")&&this.modalCloseBtn.addEventListener("click",this._events.clickCloseBtn),this.modal.addEventListener("mousedown",this._events.clickOverlay),window.addEventListener("resize",this._events.resize),document.addEventListener("keydown",this._events.keyboardNav)}var n=!1;return e.prototype.init=function(){if(!this.modal)return function(){this.modal=document.createElement("div"),this.modal.classList.add("tingle-modal"),0!==this.opts.closeMethods.length&&-1!==this.opts.closeMethods.indexOf("overlay")||this.modal.classList.add("tingle-modal--noOverlayClose"),this.modal.style.display="none",this.opts.cssClass.forEach(function(e){"string"==typeof e&&this.modal.classList.add(e)},this),-1!==this.opts.closeMethods.indexOf("button")&&(this.modalCloseBtn=document.createElement("button"),this.modalCloseBtn.type="button",this.modalCloseBtn.classList.add("tingle-modal__close"),this.modalCloseBtnIcon=document.createElement("span"),this.modalCloseBtnIcon.classList.add("tingle-modal__closeIcon"),this.modalCloseBtnIcon.innerHTML='<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M.3 9.7c.2.2.4.3.7.3.3 0 .5-.1.7-.3L5 6.4l3.3 3.3c.2.2.5.3.7.3.2 0 .5-.1.7-.3.4-.4.4-1 0-1.4L6.4 5l3.3-3.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L5 3.6 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4L3.6 5 .3 8.3c-.4.4-.4 1 0 1.4z" fill="#000" fill-rule="nonzero"/></svg>',this.modalCloseBtnLabel=document.createElement("span"),this.modalCloseBtnLabel.classList.add("tingle-modal__closeLabel"),this.modalCloseBtnLabel.innerHTML=this.opts.closeLabel,this.modalCloseBtn.appendChild(this.modalCloseBtnIcon),this.modalCloseBtn.appendChild(this.modalCloseBtnLabel)),this.modalBox=document.createElement("div"),this.modalBox.classList.add("tingle-modal-box"),this.modalBoxContent=document.createElement("div"),this.modalBoxContent.classList.add("tingle-modal-box__content"),this.modalBox.appendChild(this.modalBoxContent),-1!==this.opts.closeMethods.indexOf("button")&&this.modal.appendChild(this.modalCloseBtn),this.modal.appendChild(this.modalBox)}.call(this),i.call(this),document.body.insertBefore(this.modal,document.body.firstChild),this.opts.footer&&this.addFooter(),this},e.prototype._busy=function(e){n=e},e.prototype._isBusy=function(){return n},e.prototype.destroy=function(){null!==this.modal&&(this.isOpen()&&this.close(!0),function(){-1!==this.opts.closeMethods.indexOf("button")&&this.modalCloseBtn.removeEventListener("click",this._events.clickCloseBtn),this.modal.removeEventListener("mousedown",this._events.clickOverlay),window.removeEventListener("resize",this._events.resize),document.removeEventListener("keydown",this._events.keyboardNav)}.call(this),this.modal.parentNode.removeChild(this.modal),this.modal=null)},e.prototype.isOpen=function(){return!!this.modal.classList.contains("tingle-modal--visible")},e.prototype.open=function(){if(!this._isBusy()){this._busy(!0);var e=this;return"function"==typeof e.opts.beforeOpen&&e.opts.beforeOpen(),this.modal.style.removeProperty?this.modal.style.removeProperty("display"):this.modal.style.removeAttribute("display"),this._scrollPosition=window.pageYOffset,document.body.classList.add("tingle-enabled"),document.body.style.top=-this._scrollPosition+"px",this.setStickyFooter(this.opts.stickyFooter),this.modal.classList.add("tingle-modal--visible"),"function"==typeof e.opts.onOpen&&e.opts.onOpen.call(e),e._busy(!1),this.checkOverflow(),this}},e.prototype.close=function(e){if(!this._isBusy()){if(this._busy(!0),!1,"function"==typeof this.opts.beforeClose&&!this.opts.beforeClose.call(this))return void this._busy(!1);document.body.classList.remove("tingle-enabled"),window.scrollTo(0,this._scrollPosition),document.body.style.top=null,this.modal.classList.remove("tingle-modal--visible");this.modal.style.display="none","function"==typeof this.opts.onClose&&this.opts.onClose.call(this),this._busy(!1)}},e.prototype.setContent=function(e){return"string"==typeof e?this.modalBoxContent.innerHTML=e:(this.modalBoxContent.innerHTML="",this.modalBoxContent.appendChild(e)),this.isOpen()&&this.checkOverflow(),this},e.prototype.getContent=function(){return this.modalBoxContent},e.prototype.addFooter=function(){return function(){this.modalBoxFooter=document.createElement("div"),this.modalBoxFooter.classList.add("tingle-modal-box__footer"),this.modalBox.appendChild(this.modalBoxFooter)}.call(this),this},e.prototype.setFooterContent=function(e){return this.modalBoxFooter.innerHTML=e,this},e.prototype.getFooterContent=function(){return this.modalBoxFooter},e.prototype.setStickyFooter=function(e){return this.isOverflow()||(e=!1),e?this.modalBox.contains(this.modalBoxFooter)&&(this.modalBox.removeChild(this.modalBoxFooter),this.modal.appendChild(this.modalBoxFooter),this.modalBoxFooter.classList.add("tingle-modal-box__footer--sticky"),t.call(this),this.modalBoxContent.style["padding-bottom"]=this.modalBoxFooter.clientHeight+20+"px"):this.modalBoxFooter&&(this.modalBox.contains(this.modalBoxFooter)||(this.modal.removeChild(this.modalBoxFooter),this.modalBox.appendChild(this.modalBoxFooter),this.modalBoxFooter.style.width="auto",this.modalBoxFooter.style.left="",this.modalBoxContent.style["padding-bottom"]="",this.modalBoxFooter.classList.remove("tingle-modal-box__footer--sticky"))),this},e.prototype.addFooterBtn=function(e,t,i){var n=document.createElement("button");return n.innerHTML=e,n.addEventListener("click",i),"string"==typeof t&&t.length&&t.split(" ").forEach(function(e){n.classList.add(e)}),this.modalBoxFooter.appendChild(n),n},e.prototype.resize=function(){console.warn("Resize is deprecated and will be removed in version 1.0")},e.prototype.isOverflow=function(){var e=window.innerHeight;return this.modalBox.clientHeight>=e},e.prototype.checkOverflow=function(){this.modal.classList.contains("tingle-modal--visible")&&(this.isOverflow()?this.modal.classList.add("tingle-modal--overflow"):this.modal.classList.remove("tingle-modal--overflow"),!this.isOverflow()&&this.opts.stickyFooter?this.setStickyFooter(!1):this.isOverflow()&&this.opts.stickyFooter&&(t.call(this),this.setStickyFooter(!0)))},{modal:e}},"object"==o(t)?e.exports=n():i.tingle=n()}),n=("function"==typeof Symbol&&Symbol.iterator,document.getElementsByTagName("HEAD")[0]),a=document.createElement("style");a.type="text/css",a.appendChild(document.createTextNode('.tingle-modal * {\n\tbox-sizing: border-box\n}\n\n.tingle-modal {\n\tposition: fixed;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\tdisplay: -ms-flexbox;\n\tdisplay: flex;\n\tvisibility: hidden;\n\t-ms-flex-direction: column;\n\tflex-direction: column;\n\t-ms-flex-align: center;\n\talign-items: center;\n\toverflow: hidden;\n\t-webkit-overflow-scrolling: touch;\n\tbackground: rgba(0, 0, 0, .2);\n\topacity: 0;\n\tcursor: pointer\n}\n\n.tingle-modal--noClose .tingle-modal__close,\n.tingle-modal__closeLabel {\n\tdisplay: none\n}\n\n.tingle-modal--confirm .tingle-modal-box {\n\ttext-align: center\n}\n\n.tingle-modal--noOverlayClose {\n\tcursor: default\n}\n\n.tingle-modal__close {\n\tposition: fixed;\n\ttop: 2rem;\n\tright: 2rem;\n\tz-index: 1000;\n\tpadding: 0;\n\twidth: 2rem;\n\theight: 2rem;\n\tborder: none;\n\tbackground-color: transparent;\n\tcolor: #fff;\n\tcursor: pointer\n}\n\n.tingle-modal__close svg * {\n\tfill: currentColor\n}\n\n.tingle-modal__close:hover {\n\tcolor: #fff\n}\n\n.tingle-modal-box {\n\tposition: relative;\n\t-ms-flex-negative: 0;\n\tflex-shrink: 0;\n\tmargin-top: auto;\n\tmargin-bottom: auto;\n\twidth: 400px;\n\tborder-radius: 4px;\n\tbackground: #fff;\n\topacity: 1;\n\tcursor: auto;\n\twill-change: transform, opacity\n}\n\n.tingle-modal-box__content {\n\tpadding: 1rem\n}\n\n.tingle-modal-box__footer {\n\tpadding: 0.5rem 1rem;\n\twidth: auto;\n\tborder-bottom-right-radius: 4px;\n\tborder-bottom-left-radius: 4px;\n\tbackground-color: #f5f5f5;\n\tcursor: auto\n}\n\n.tingle-modal-box__footer::after {\n\tdisplay: table;\n\tclear: both;\n\tcontent: ""\n}\n\n.tingle-modal-box__footer--sticky {\n\tposition: fixed;\n\tbottom: -200px;\n\tz-index: 10001;\n\topacity: 1;\n\ttransition: bottom .3s ease-in-out .3s\n}\n\n.tingle-enabled {\n\tposition: fixed;\n\tright: 0;\n\tleft: 0;\n\toverflow: hidden\n}\n\n.tingle-modal--visible .tingle-modal-box__footer {\n\tbottom: 0\n}\n\n.tingle-enabled .tingle-content-wrapper {\n\tfilter: blur(8px)\n}\n\n.tingle-modal--visible {\n\tvisibility: visible;\n\topacity: 1;\n\tz-index: 2000;\n}\n\n.tingle-modal--visible .tingle-modal-box {\n\tanimation: scale .2s cubic-bezier(.68, -.55, .265, 1.55) forwards\n}\n\n.tingle-modal--overflow {\n\toverflow-y: scroll;\n\tpadding-top: 8vh\n}\n\n.tingle-btn {\n\tdisplay: inline-block;\n\tmargin: 0 .5rem;\n\tpadding: 0.3rem 0.5rem;\n\tborder: none;\n\tbackground-color: grey;\n\tbox-shadow: none;\n\tcolor: #fff;\n\tvertical-align: middle;\n\ttext-decoration: none;\n\tfont-size: inherit;\n\tfont-family: inherit;\n\tline-height: normal;\n\tcursor: pointer;\n\ttransition: background-color .4s ease\n}\n\n.tingle-btn--primary {\n\tbackground-color: #3498db\n}\n\n.tingle-btn--danger {\n\tbackground-color: #e74c3c\n}\n\n.tingle-btn--default {\n\tbackground-color: #34495e\n}\n\n.tingle-btn--pull-left {\n\tfloat: left\n}\n\n.tingle-btn--pull-right {\n\tfloat: right\n}\n\n@media (max-width :540px) {\n\t.tingle-modal {\n\t\ttop: 0;\n\t\tdisplay: block;\n\t\tpadding-top: 60px;\n\t\twidth: 100%\n\t}\n\t.tingle-modal-box {\n\t\twidth: auto;\n\t\tborder-radius: 0\n\t}\n\t.tingle-modal-box__content {\n\t\toverflow-y: scroll\n\t}\n\t.tingle-modal--noClose {\n\t\ttop: 0\n\t}\n\t.tingle-modal--noOverlayClose {\n\t\tpadding-top: 0\n\t}\n\t.tingle-modal-box__footer .tingle-btn {\n\t\tdisplay: block;\n\t\tfloat: none;\n\t\tmargin-bottom: 1rem;\n\t\twidth: 100%\n\t}\n\t.tingle-modal__close {\n\t\ttop: 0;\n\t\tright: 0;\n\t\tleft: 0;\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t\theight: 60px;\n\t\tborder: none;\n\t\tbackground-color: #2c3e50;\n\t\tbox-shadow: none;\n\t\tcolor: #fff\n\t}\n\t.tingle-modal__closeLabel {\n\t\tdisplay: inline-block;\n\t\tvertical-align: middle;\n\t\tfont-size: 1.6rem;\n\t\tfont-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif\n\t}\n\t.tingle-modal__closeIcon {\n\t\tdisplay: inline-block;\n\t\tmargin-right: .8rem;\n\t\twidth: 1.6rem;\n\t\tvertical-align: middle;\n\t\tfont-size: 0\n\t}\n}\n\n@supports ((-webkit-backdrop-filter:blur(12px)) or (backdrop-filter:blur(12px))) {\n\t.tingle-modal {\n\t\t-webkit-backdrop-filter: blur(20px);\n\t\tbackdrop-filter: blur(20px)\n\t}\n\t@media (max-width :540px) {\n\t\t.tingle-modal {\n\t\t\t-webkit-backdrop-filter: blur(8px);\n\t\t\tbackdrop-filter: blur(8px)\n\t\t}\n\t}\n\t.tingle-enabled .tingle-content-wrapper {\n\t\tfilter: none\n\t}\n}\n\n@keyframes scale {\n\t0% {\n\t\topacity: 0;\n\t\ttransform: scale(.9)\n\t}\n\t100% {\n\t\topacity: 1;\n\t\ttransform: scale(1)\n\t}\n}')),n.appendChild(a);var f=new i.modal({footer:!0,stickyFooter:!1,closeMethods:["overlay","button","escape"],closeLabel:"Close",cssClass:["custom-class-1","custom-class-2"],onOpen:function(){console.log("modal open")},onClose:function(){console.log("modal closed")},beforeClose:function(){return $("#add_exception").val(""),!0}});if(f.setContent('<div style="text-align:center">\n                    <div style="font-size: 14px">Add to suggestion?</div>\n                    <p style="font-size: 12px">( Type your suggestion and press enter to add ) </br>\n                      (Use CTRL + ALT + M to use virtual keyboard)\n                    </p>\n                  </div>\n                  <div style="text-align:center">\n                    <textarea id="add_exception" style="resize:none; padding:10px; font-size:1.4rem; border: 1px solid rgba(0,0,0,0.2);border-radius: 4px;outline: none;"></textarea>\n                  </div>'),f.addFooterBtn("Cancel","tingle-btn tingle-btn--danger",function(){$("#add_exception").val(""),f.close()}),window.localStorage.getItem("dictionary")||window.localStorage.setItem("dictionary",JSON.stringify([{}])),null==jQuery||null==$)throw new Error("jQuery is required for SwalekhWeb to work.");var r={english:!0,hindi:!0,bengali:!0,assamese:!0,marathi:!0,punjabi:!0,gujarati:!0,odia:!0,tamil:!0,telugu:!0,malayalam:!0,kannada:!0,arabic:!0,german:!0,french:!0,spanish:!0,russian:!0};Object.keys(r).filter(function(e){return r[e]});$.keyboard.layouts.english={name:"english",lang:["en"],default:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","q w e r t y u i o p [ ] \\","a s d f g h j k l ; '","z x c v b n m , . /","{shift} {space} {enter}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","Q W E R T Y U I O P { } |",'A S D F G H J K L : "',"Z X C V B N M < > ?","{shift} {space} {enter}"]},$.keyboard.layouts.hindi={name:"hindi",lang:["hi"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) ॉ(\\)","\0 ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} \0(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["~ ऍ(~) ॅ(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) ऑ(|)",'\0 ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) \0(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} \0(Z) ँ(X) ण(C) \0(V) \0(B) ळ(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.bengali={name:"bengali",lang:["bn"],default:["` ১(1) ২(2) ৩(3) ৪(4) ৫(5) ৬(6) ৭(7) ৮(8) ৯(9) ০(0) - ৃ(=) {bksp}","ৌ(q) ৈ(w) া(e) ী(r) ূ(t) ব(y) হ(u) গ(i) দ(o) জ(p) ড([) ়(]) \\","ো(a) ে(s) ্(d) ি(f) ু(g) প(h) র(j) ক(k) ত(l) চ(;) ট(')","ৎ(z) ং(x) ম(c) ন(v) \0(b) ল(n) স(m) ,(,) .(.) য়(/)","{shift} {space} {enter}"],shift:["~ ্য(!) \0(@) ্র(#) র্($) জ্ঞ(%) ত্র(^) ক্ষ(&) শ্র(*) ( ) ঃ(_) ঋ(+) {bksp}","ঔ(Q) ঐ(W) আ(E) ঈ(R) ঊ(T) ভ(Y) ঙ(U) ঘ(I) ধ(O) ঝ(P) ঢ({) ঞ(}) |",'ও(A) এ(S) অ(D) ই(F) উ(G) ফ(H) \0(J) খ(K) থ(L) ছ(:) ঠ(")',"?(Z) ঁ(X) ণ(C) \0(V) \0(B) ল(N) শ(M) ষ(<) ।(>) য(?)","{shift} {space} {enter}"]},$.keyboard.layouts.assamese={name:"assamese",lang:["as"],default:["` ১(1) ২(2) ৩(3) ৪(4) ৫(5) ৬(6) ৭(7) ৮(8) ৯(9) ০(0) - ৃ(=) {bksp}","ৌ(q) ৈ(w) া(e) ী(r) ূ(t) ব(y) হ(u) গ(i) দ(o) জ(p) ড([) ়(]) \\","ো(a) ে(s) ্(d) ি(f) ু(g) প(h) ৰ(j) ক(k) ত(l) চ(;) ট(')","ৎ(z) ং(x) ম(c) ন(v) ৱ(b) ল(n) স(m) ,(,) .(.) য়(/)","{shift} {space} {enter}"],shift:["~ ্য(!) \0(@) ্ৰ(#) ৰ্($) জ্ঞ(%) ত্ৰ(^) ক্ষ(&) শ্ৰ(*) ( ) ঃ(_) ঋ(+) {bksp}","ঔ(Q) ঐ(W) আ(E) ঈ(R) ঊ(T) ভ(Y) ঙ(U) ঘ(I) ধ(O) ঝ(P) ঢ({) ঞ(}) |",'ও(A) এ(S) অ(D) ই(F) উ(G) ফ(H) \0(J) খ(K) থ(L) ছ(:) ঠ(")',"?(Z) ঁ(X) ণ(C) \0(V) \0(B) ল(N) শ(M) ষ(<) ।(>) য(?)","{shift} {space} {enter}"]},$.keyboard.layouts.marathi={name:"marathi",lang:["hi"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) ॉ(\\)","ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(')","\0(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/)","{shift} {space} {enter}"],shift:["~ ऍ(!) ॅ(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) ऑ(|)",'ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ऱ(J) ख(K) थ(L) छ(:) ठ(")',"?(Z) ँ(X) ण(C) \0(V) \0(B) ळ(N) श(M) ष(<) ।(>) य़(?)","{shift} {space} {enter}"]},$.keyboard.layouts.punjabi={name:"punjabi",lang:["pn"],default:["` ੧(1) ੨(2) ੩(3) ੪(4) ੫(5) ੬(6) ੭(7) ੮(8) ੯(9) ੦(0) - = {bksp}","ੌ(q) ੈ(w) ਾ(e) ੀ(r) ੂ(t) ਬ(y) ਹ(u) ਗ(i) ਦ(o) ਜ(p) ਡ([) ਼(]) \\","ੋ(a) ੇ(s) ੍(d) ਿ(f) ੁ(g) ਪ(h) ਰ(j) ਕ(k) ਤ(l) ਚ(;) ਟ(')","\0(z) ਂ(x) ਮ(c) ਨ(v) ਵ(b) ਲ(n) ਸ(m) ,(,) .(.) ਯ(/)","{shift} {space} {enter}"],shift:["~ \0(!) \0(@) ੍ਰ(#) ਰ੍($) \0(%) ਤ੍ਰ(^) \0(&) ਸ਼੍ਰ(*)  ( ) ਃ(_) \0(+) {bksp}","ਔ(Q) ਐ(W) ਆ(E) ਈ(R) ਊ(T) ਭ(Y) ਙ(U) ਘ(I) ਧ(O) ਝ(P) ਢ({) ਞ(}) |",'ਓ(A) ਏ(S) ਅ(D) ਇ(F) ਉ(G) ਫ(H) \0(J) ਖ(K) ਥ(L) ਛ(:) ਠ(")',"\0(Z) ਁ(X) ਣ(C) \0(V) \0(B) ਲ਼(N) ਸ਼(M) \0(<) \0(>) ?(?)","{shift} {space} {enter}"]},$.keyboard.layouts.gujarati={name:"gujarati",lang:["gj"],default:["` ૧(1) ૨(2) ૩(3) ૪(4) ૫(5) ૬(6) ૭(7) ૮(8) ૯(9) ૦(0) - ૃ(=) {bksp}","ૌ(q) ૈ(w) ા(e) ી(r) ૂ(t) બ(y) હ(u) ગ(i) દ(o) જ(p) ડ([) ઼(]) ૉ(\\)","ો(a) ે(s) ્(d) િ(f) ુ(g) પ(h) ર(j) ક(k) ત(l) ચ(;) ટ(')","\0(z) ં(x) મ(c) ન(v) વ(b) લ(n) સ(m) ,(,) .(.) ય(/)","{shift} {space} {enter}"],shift:["~ ઍ(!) ૅ(@) ્ર(#) ર્($) જ્ઞ(%) ત્ર(^) ક્ષ(&) શ્ર(*) ( ) ઃ(_) ઋ(+) {bksp}","ઔ(Q) ઐ(W) આ(E) ઈ(R) ઊ(T) ભ(Y) ઙ(U) ઘ(I) ધ(O) ઝ(P) ઢ({) ઞ(}) ઑ(|)",'ઓ(A) એ(S) અ(D) ઇ(F) ઉ(G) ફ(H) \0(J) ખ(K) થ(L) છ(:) ઠ(")',"\0(Z) ઁ(X) ણ(C) \0(V) \0(B) ળ(N) શ(M) ષ(<) \0(>) \0(?)","{shift} {space} {enter}"]},$.keyboard.layouts.odia={name:"odia",lang:["oy"],default:[" ` ୧(1) ୨(2) ୩(3) ୪(4) ୫(5) ୬(6) ୭(7) ୮(8) ୯(9) ୦(0) - ୃ(=) {bksp}","{tab} ୌ(q) ୈ(w) ା(e) ୀ(r) ୂ(t) ବ(y) ହ(u) ଗ(i) ଦ(o) ଜ(p) ଡ([) ଼(]) \\","\0 ୋ(a) େ(s) ୍(d) ି(f) ୁ(g) ପ(h) ର(j) କ(k) ତ(l) ଚ(;) ଟ(') {enter}","{shift} ଡ଼(z) ଂ(x) ମ(c) ନ(v) ୱ(b)  ଲ(n) ସ(m) ,(,) .(.) ଯ(/) {shift}","{space}"],shift:["~ \0(!) \0(@) ୍ର(#) ର୍($) ଜ୍ଞ(%) ତ୍ର(^) କ୍ଷ(&) ଶ୍ର(*) ( ) ଃ(_) ଋ(+) {bksp}","{tab} ଔ(Q) ଐ(W) ଆ(E) ଈ(R) ଊ(T) ଭ(Y) ଙ(U) ଘ(I) ଧ(O) ଝ(P) ଢ({) ଞ(}) {ZWNJ}",'\0 ଓ(A) ଏ(S) ଅ(D) ଇ(F) ଉ(G) ଫ(H) \0(J) ଖ(K) ଥ(L) ଛ(:) ଠ(") {enter}',"{shift} ଢ଼(Z) ଁ(X) ଣ(C) \0(V) ଵ(B) ଳ(N) ଶ(M) ଷ(<) ।(>) ୟ(?) {shift}","{space} "]},$.keyboard.layouts.tamil={name:"tamil",lang:["ta"],default:["ொ(`) ௧(1) ௨(2) ௩(3) ௪(4) ௫(5) ௬(6) ௭(7) ௮(8) ௯(9) ௦(0) - = {bksp}","ௌ(q) ை(w) ா(e) ீ(r) ூ(t) \0(y) ஹ(u) \0(i) \0(o) ஜ(p) \0([) \0(]) \\","ோ(a) ே(s) ்(d) ி(f) ு(g) ப(h) ர(j) க(k) த(l) ச(;) ட(')","ெ(z) \0(x) ம(c) ந(v) வ(b) ல(n) ஸ(m) ,(,) .(.) ய(/)","{shift} {space} {enter}"],shift:["ஒ(~) \0(!) \0(@) \0(#) ர்($) \0(%) த்ர(^) க்ஷ(&) ஶ்ர(*) ( ) _ ஃ(+) {bksp}","ஔ(Q) ஐ(W) ஆ(E) ஈ(R) ஊ(T) \0(Y) ங(U) \0(I) \0(O) \0(P) \0({) ஞ(}) {ZWNJ}",'ஓ(A) ஏ(S) அ(D) இ(F) உ(G) \0(H) ற(J) \0(K) \0(L) \0(:) \0(")',"எ(Z) \0(X) ண(C) ன(V) ழ(B) ள(N) \0(M) ஷ(<) \0(>) ?(?)","{shift} {space} {enter}"]},$.keyboard.layouts.telugu={name:"telugu",lang:["te"],default:["ొ(`) ౧(1) ౨(2) ౩(3) ౪(4) ౫(5) ౬(6) ౭(7) ౮(8) ౯(9) ౦(0) - ృ(=) {bksp}","ౌ(q) ై(w) ా(e) ీ(r) ూ(t) బ(y) హ(u) గ(i) ద(o) జ(p) డ([) \0(]) \\","ో(a) ే(s) ్(d) ి(f) ు(g) ప(h) ర(j) క(k) త(l) చ(;) ట(')","ె(z) ం(x) మ(c) న(v) వ(b) ల(n) స(m) ,(,) .(.) య(/)","{shift} {space} {enter}"],shift:["ఒ(~) \0(!) \0(@) ్ర(#) \0($) జ్ఞ(%) త్ర(^) క్ష(&) శ్ర(*) ( ) ಃ(_) ఋ(+) {bksp}","ఔ(Q) ఐ(W) ఆ(E) ఈ(R) ఊ(T) భ(Y) ఙ(U) ఘ(I) ధ(O) ఝ(P) ఢ({) ఞ(}) {ZWNJ}",'ఓ(A) ఏ(S) అ(D) ఇ(F) ఉ(G) ఫ(H) \0(J) ఖ(K) థ(L) ఛ(:) ఠ(")',"ఎ(Z) \0(X) ణ(C) \0(V) \0(B) ళ(N) శ(M) ష(<) \0(>) ?(?)","{shift} {space} {enter}"]},$.keyboard.layouts.malayalam={name:"malayalam",lang:["ma"],default:["ൊ(`) ൧(1) ൨(2) ൩(3) ൪(4) ൫(5) ൬(6) ൭(7) ൮(8) ൯(9) ൦(0) - ൃ(=) {bksp}","ൗ(q) ൈ(w) ാ(e) ീ(r) ൂ(t) ബ(y) ഹ(u) ഗ(i) ദ(o) ജ(p) ഡ([) \0(]) ർ(\\)","ോ(a) േ(s) ്(d) ി(f) ു(g) പ(h) ര(j) ക(k) ത(l) ച(;) ട(')","െ(z) ം(x) മ(c) ന(v) വ(b) ല(n) സ(m) ,(,) .(.) യ(/)","{shift} {space} {enter}"],shift:["ഒ(~) \0(!) \0(@) ്ര(#) ര്($) ജ്ഞ(%) ത്ര(^) ക്ഷ(&) ൾ(*)  ( ) ഃ(_) ഋ(+) {bksp}","ഔ(Q) ഐ(W) ആ(E) ഈ(R) ഊ(T) ഭ(Y) ങ(U) ഘ(I) ധ(O) ഝ(P) ഢ({) ഞ(}) {ZWNJ}",'ഓ(A) ഏ(S) അ(D) ഇ(F) ഉ(G) ഫ(H) റ(J) ഖ(K) ഥ(L) ഛ(:) ഠ(")',"എ(Z) ൺ(X) ണ(C) ൻ(V) ഴ(B) ള(N) ശ(M) ഷ(<) ൽ(>) ?(?)","{shift} {space} {enter}"]},$.keyboard.layouts.kannada={name:"kannada",lang:["ka"],default:["ೊ(`) ೧(1) ೨(2) ೩(3) ೪(4) ೫(5) ೬(6) ೭(7) ೮(8) ೯(9) ೦(0) - ೃ(=) {bksp}","ೌ(q) ೈ(w) ಾ(e) ೀ(r) ೂ(t) ಬ(y) ಹ(u) ಗ(i) ದ(o) ಜ(p) ಡ([) \0(]) \\","ೋ(a) ೇ(s) ್(d) ಿ(f) ು(g) ಪ(h) ರ(j) ಕ(k) ತ(l) ಚ(;) ಟ(') {enter}","{shift} ೆ(z) ಂ(x) ಮ(c) ನ(v) ವ(b) ಲ(n) ಸ(m) ,(,) .(.) ಯ(/) {shift}","{space}"],shift:["ಒ(~) \0(!) \0(@) ್ರ(#) ರ್($) ಜ್ಞ(%) ತ್ರ(^) ಕ್ಷ(&) ಶ್ರ(*) ( ) ಃ(_) ಋ(+) {bksp}","ಔ(Q) ಐ(W) ಆ(E) ಈ(R) ಊ(T) ಭ(Y) ಙ(U) ಘ(I) ಧ(O) ಝ(P) ಢ({) ಞ(}) {ZWNJ}",'ಓ(A) ಏ(S) ಅ(D) ಇ(F) ಉ(G) ಫ(H) \0(J) ಖ(K) ಥ(L) ಛ(:) ಠ(") {enter}',"{shift} ಎ(Z) \0(X) ಣ(C) \0(V) \0(B) ಳ(N) ಶ(M) ಷ(<) \0(>) ?(?) {shift}","{space}"]},$.keyboard.layouts.arabic={name:"arabic",lang:["ar"],default:["> & é # { [ | ̀ \\ ^ @ ] } {bksp}","{tab} ض ص ث ق ف غ ع ه خ ح ج د","ش س ي ب ل ا ت ن م ك ط ذ {enter}","{shift} ـ ئ ء ؤ ر ﻻ ى ة و ز ظ {shift}"," {alt} {space} {alt}"],shift:["< 1 2 3 4 5 6 7 8 9 0 ° + {bksp}","{tab} َ ً ُ ٌ ﻹ إ ` ÷ × ؛ ج ¤","\\ س [ ] ﻷ أ ـ ، / : ¨ ّ {enter}","{shift} | ~ ْ ِ ٍ ﻵ آ ' , . ؟ {shift}","{alt} {space} {alt}"]},$.keyboard.layouts.german={name:"german",lang:["de"],default:["̂(`) 1 2 3 4 5 6 7 8 9 0 ß(-) ́(=) {bksp}","{tab} q w e r t z u i o p ü([) +","a s d f g h j k l ö(;) ä(') {enter}","{shift} < y x c v b n m , . - {shift}"," {space} "],shift:['°(~) ! " §(#) $ % & / ( ) = ? ̀(+) {bksp}',"{tab} Q W E R T Z U I O P Ü({) *","A S D F G H J K L Ö(:) Ä(\") ' {enter}","{shift} > Y X C V B N M ; : _ {shift}"," {space}"],alt:["̂(`) 1 ²(™) ³(£) 4 5 6 { [ ] } \\(–) ́(≠) {bksp}","{tab} @ w €(´) r t z u i o p ü(“) ̃(‘)","a s d f g h j k l ö(…) ä(æ) # {enter}","{shift} |(Ω) y x c v b n µ(µ) , . - {shift}"," {space}"]},$.keyboard.layouts.french={name:"french",lang:["fr"],normal:["²(`) &(1) é(2) \"(3) '(4) ((5) -(6) è(7) _(8) ç(9) à(0) ) = {bksp}","{tab} a z e r t y u i o p ^ $","q s d f g h j k l m  ù(,) * {enter}","{shift} < w x c v b n , ; : ! {shift}","{space}"],shift:["{sp:1} 1 2 3 4 5 6 7 8 9 0 °(+) + {bksp}","{tab} A Z E R T Y U I O P ¨({) £(})",'Q S D F G H J K L M % µ(") {enter}',"{shift} > W X C V B N ? . / §(?) {shift}","{space}"],alt:["²(`) & ~ # { [ | ` (•) ^ @ ] } {bksp}","{tab} a z €(´) r t y u i o p ^ ¤(‘)","q s d f g h j k l m  ù(…) * {enter}","{shift} < w x c v b n , ; : ! {shift}","{space}"],"alt-shift":["{sp:1} 1 ~ # { [ | ` (°) ^ @ ] } {bksp}","{tab} A Z €(´) R T Y U I O P ¨(”) ¤(’)","Q S D F G H J K L M % µ(Æ) {enter}","{shift} > W X C V B N ? . / §(¿) {shift}","{space}"]},$.keyboard.layouts.spanish={name:"spanish",lang:["es"],normal:["|(`) 1 2 3 4 5 6 7 8 9 0 '(-) ¿(=) {bksp}","{tab} q w e r t y u i o p ́([) +","a s d f g h j k l ñ(;) {(') } {enter}","{shift} < z x c v b n m , . - {shift}","{space}"],shift:['°(~) ! " # $ % & / ( ) = ? ¡(+) {bksp}',"{tab} Q W E R T Y U I O P ̈({) *",'A S D F G H J K L Ñ(:) [(") ] {enter}',"{shift} > Z X C V B N M ; : _ {shift}","{space}"],alt:["¬(`) 1 2 3 4 5 6 7 8 9 0 \\(–) ¿(≠) {bksp}","{tab} @ w e r t y u i o p ́(“) ̃(‘)","a s d f g h j k l ñ(…) ̂(æ) ̀ {enter}","{shift} < z x c v b n m , . - {shift}","{space}"],"alt-shift":['°(`) ! " # $ % & / ( ) = ? ¡(±) {bksp}',"{tab} Q W E R T Y U I O P ̈(”) *","A S D F G H J K L Ñ(Ú) [(Æ) ] {enter}","{shift} > Z X C V B N M ; : _ {shift}","{space}"]},$.keyboard.layouts.russian={name:"russian",lang:["ru"],default:["] 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} й(q) ц(w) у(e) к(r) е(t) н(y) г(u) ш(i) щ(o) з(p) х([) ъ(]) ё()","ф(a) ы(s) в(d) а(f) п(g) р(h) о(j) л(k) д(l) ж(;) э(') {enter}","{shift} я(z) ч(x) с(c) м(v) и(b) т(n) ь(m) б(,) ю(.) / {shift}","{space}"],shift:['[ ! " № % : , . ; ( ) _ + {bksp}',"{tab} Й(Q) Ц(W) У(E) К(R) Е(T) Н(Y) Г(U) Ш(I) Щ(O) З(P) Х({) Ъ(}) Ё(|)",'Ф(A) Ы(S) В(D) А(F) П(G) Р(H) О(J) Л(K) Д(L) Ж(:) Э(") {enter}',"{shift} Я(Z) Ч(X) С(C) М(V) И(B) Т(N) Ь(M) Б(<) Ю(>) ? {shift}","{space}"]};var g=null,l=null;u(jQuery||$);var c,d;c=function(e){l=$(e.target);var t=$(e.target).getkeyboard(),i=t.$keyboard;i.prepend('<div class="ui-keyboard-toolbar" id="drag-handle"><div class="ui-kb-suggestions" style="color: #444"></div><div class="ui-kb-tools-2" style="position: relative"></div></div>'),$("#ui-kb-lang-title").text(t.options.layout&&t.options.layout.toUpperCase()),i.draggable({handle:"#drag-handle",containment:"parent"}),$("#ui-kb-close-btn").off().on("click",function(e){e.preventDefault(),t.accept(),t.close()}),$("#kb-switch-to-phonetic").off().on("click",function(e){if(e.preventDefault(),!l)return!1;l.getkeyboard().destroy(),h(l,l.data()),g=l,l=null,g.focus()})},d=function(e){$(e.target).getkeyboard()};var p=null;p=function(e,t,i){t.mode="keyboard",e.data(t),e.attr("data-indic-input-mode","keyboard"),setTimeout(function(){e.trigger("mode_changed","keyboard"),e.trigger("lang_changed",t.layout)},10);var n={layout:t.layout,autoAccept:!0,alwaysOpen:!1,caretToEnd:!0,usePreview:!1,position:!1,beforeVisible:c,visible:d,change:function(e,t,i){i.value=t.preview.value},beforeClose:function(e,t,i,n){t.accept(),i.value=t.originalContent}};e.keyboard(n).addTyping({showTyping:!0,delay:100})};var h=null;h=function(p,e,t){e.mode="phonetic",p.data(e),p.attr("data-indic-input-mode","phonetic"),setTimeout(function(){p.trigger("mode_changed","phonetic"),p.trigger("lang_changed",e.layout)},10);var h,u,A=null;p.textcomplete([{match:/\b(\w{1,})$/,completeOnSpace:!0,search:function(t,i){0,h=t;(g=p).data().layout;if(window.localStorage){var n=window.localStorage.getItem("rev_t13n_dict");n||(window.localStorage.setItem("rev_t13n_dict",JSON.stringify({})),n=JSON.stringify({})),n=JSON.parse(n);var e=p.data(),o=e.apikey,s=e.appid,a=e.orgName,r=e.layout,l=e.numSuggestions,c=e.apiEndpoint,d=e.domain;i([t]),c="/"!=c.slice(-1)?c+"/":c,null!==A&&A.readyState<4&&A.abort(),A=$.ajax({url:""+c+a+"/transliteration/1.0?source_lang=english&target_lang="+r+"&content_lang="+r+"&domain="+d+"&noOfsuggestions="+l,type:"post",headers:{"rev-api-key":o,"rev-app-id":s},data:JSON.stringify({data:[t]}),contentType:"application/json",crossOrigin:!0,dataType:"json"}).then(function(e){e.responseList[0].outString,h===t&&(u=r,n[h]&&n[h][u]||(n[h]={},n[h][u]={value:"",freq:0}),n[t][u].value&&e.responseList[0].outString.indexOf(n[t][u].value)&&(e.responseList[0].outString.splice(e.responseList[0].outString.indexOf(n[t][u].value),1),e.responseList[0].outString.unshift(n[t][u].value)),i(e.responseList[0].outString),"add_exception"!==$(g).attr("id")&&function(t,n,e,o){var s=$(o).attr("id");if("add_exception"===s)return;$(".exception_container").mouseenter(function(e){m=document.getSelection().getRangeAt(0)}),$(".exception_container").click(function(e){e.preventDefault(),e.stopPropagation(),f.open(),"add_exception"!==s&&(y=o),$(y).textcomplete("deactivate");var i=$("#add_exception");console.log(t),$("#add_exception").click(function(e){var t=$("#add_exception").attr("data-indic-input-mode");"undefined"!==t&&t?console.log("hasAttr"):(i.indicInputEditor({apikey:"6c4134e8fe6363b7277bbd6a790c56c7",appid:"com.prabandhak",orgName:"Prabandhak",numSuggestions:8,mode:"phonetic",domain:1}),i.trigger("change_lang",n),$("#add_exception").on("lang_changed",function(){$("#add_exception").focus()}))}),$("#add_exception").keypress(function(e){if("Enter"===e.key&&(e.preventDefault(),e.stopPropagation(),""!==(t=document.getElementById("add_exception").value))){var t=t.trim();return v(b,t,n),$("#add_exception").getkeyboard()&&$("#add_exception").getkeyboard().close(),function(e,t,i){if("true"===$(e).attr("contentEditable")){var n,o=document.createRange(),s=window.getSelection();n=e[0].childNodes[0].length&&e[0].childNodes[0].length<n?e[0].childNodes[0].length:t.startOffset,o.setStart(e[0].childNodes[0],n),o.collapse(!0),s.removeAllRanges(),s.addRange(o),e.focus()}else e.selectionStart=t.startOffset,e.selectionEnd=t.startOffset,e.focus();console.log("Insert value ",i," at position ",t," for element ",e,$(e).val())}(y,m,t),$("#add_exception").val(""),void f.close()}})})}(b=h,u,0,g))}).fail(function(e){console.log("Transliteration API failure.."),console.log(e)})}},index:0,replace:function(e){return v(h,e,u),p.focus(),e}}],{header:function(){return'<div id="kb-switch-container">\n     </div>'},footer:function(){return'<div class="exception_container">\n      <span>Not Found?</span>\n    </div>'}})};var m=0,y=void 0,b=void 0;function v(e,t,i){var n=JSON.parse(window.localStorage.getItem("rev_t13n_dict"));n[e]&&n[e][i]||(n[e]={},n[e][i]={value:"",freq:0},window.localStorage.setItem("rev_t13n_dict",JSON.stringify(n))),n[e][i].value===t?n[e][i].freq+=1:(n[e][i].value=t,n[e][i].freq=1),window.localStorage.setItem("rev_t13n_dict",JSON.stringify(n))}function u(s){s('<style>@font-face {\n  font-family: "kb-icon";\n  src: url(data:application/octet-stream;base64,AAEAAAAPAIAAAwBwR1NVQiCLJXoAAAD8AAAAVE9TLzI+IUkvAAABUAAAAFZjbWFw6Tf8KgAAAagAAAGoY3Z0IAbV/wIAAAooAAAAIGZwZ22KkZBZAAAKSAAAC3BnYXNwAAAAEAAACiAAAAAIZ2x5Zm0aPD4AAANQAAADAmhlYWQPbApMAAAGVAAAADZoaGVhBzADWwAABowAAAAkaG10eBWm//IAAAawAAAAGGxvY2ECnwF2AAAGyAAAAA5tYXhwAY8MEAAABtgAAAAgbmFtZcydHR8AAAb4AAACzXBvc3RVxicDAAAJyAAAAFZwcmVw5UErvAAAFbgAAACGAAEAAAAKADAAPgACREZMVAAObGF0bgAaAAQAAAAAAAAAAQAAAAQAAAAAAAAAAQAAAAFsaWdhAAgAAAABAAAAAQAEAAQAAAABAAgAAQAGAAAAAQAAAAEDnAGQAAUAAAJ6ArwAAACMAnoCvAAAAeAAMQECAAACAAUDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBmRWQAQOgA6AQDUv9qAFoDUgCXAAAAAQAAAAAAAAAAAAUAAAADAAAALAAAAAQAAAFcAAEAAAAAAFYAAwABAAAALAADAAoAAAFcAAQAKgAAAAQABAABAADoBP//AADoAP//AAAAAQAEAAAAAQACAAMABAAFAAABBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAABMAAAAAAAAAAUAAOgAAADoAAAAAAEAAOgBAADoAQAAAAIAAOgCAADoAgAAAAMAAOgDAADoAwAAAAQAAOgEAADoBAAAAAUAAQAA/2kD6ANRAAsABrMIAgEtKwkBBwkBJwkBNwkBFwKOAVqa/qb+ppoBWv6mmgFaAVqaAV3+ppoBWv6mmgFaAVqa/qYBWpoAAQAAAAACHAJLAAIAFUASAQEARAEBAABmAAAAAgACAgUUKwkCAhz+8/7xAkv+JwHZAAAAAA4AAAAAA+gCigAPABMAFwAbAB8AIwAnACsALwAzADcAOwA/AEMArECpHAEAGiAPHwseBx0IAwIAA14kGw4KBgUCGRAMCAQEBQIEXhgRDQkEBRYUAhITBRJeIxciFSEFEwEBE1IjFyIVIQUTEwFYAAETAUxAQDg4NDQwMCgoICAYGBAQAQBAQ0BDQkE/Pj08ODs4Ozo5NDc0NzY1MDMwMzIxLy4tLCgrKCsqKScmJSQgIyAjIiEfHh0cGBsYGxoZFxYVFBATEBMSEQkGAA8BDiUFFCsBMhYVERQGIyEiJjURNDYzBRUzNRcjFTMlFTM1FyMVMyUVMzUXIxUzJRUzNRcjFTMHNSMVITUhFSE1IxUnMzUjNzUjFQOiHCoqHPykHCoqHAHgZDJkZP7UZDJkZP7UZDJkZP7UZDJkZDJkAor+DAKKZDJkZJbIAooqHP40HigoHgHMHCpkZGSWZPpkZJZk+mRklmT6ZGSWZJZkZGRkZGSWZDJkZAACAAD/agPoA1IACQAQADRAMQ4NAgEAEAwLCAcFAgECRwABAQBWAAAADEgAAgIDVgQBAwMNA0kAAAAJAAkREREFBRcrFREhByERIRE3EQE3FwEXAQcChqT+wgKgpP0ChYEBaYX+l4WWA+ik/WABP6T9eQJvg4EBa4T+lIUAAv/yAAAD6gK8ABAAHAAoQCUcGxoZGBcWFRQTEgsBAAFHAgEAAQBvAAEBZgEACQYAEAEPAwUUKwEyFhURFAYjISInASY3ATYzATcnNycHJwcXBxc3A4YqOjoq/iImIP6sHBwBVB4oAVJIgIBIgIBIgIBIgAK8Oir+DCg8HAEoGhwBKBr92kp+gEh+fkiAfkqAAAAAAAEAAAABAAC/jZ2JXw889QALA+gAAAAA1jhjVgAAAADWOGNW//L/aQPqA1IAAAAIAAIAAAAAAAAAAQAAA1L/agAAA+r/8gAAA+oAAQAAAAAAAAAAAAAAAAAAAAYD6AAAA+gAAAIcAAAD6AAAA+gAAAPq//IAAAAAACQAPgD6ATgBgQAAAAEAAAAGAEQADgAAAAAAAgBKAFoAcwAAAL0LcAAAAAAAAAASAN4AAQAAAAAAAAA1AAAAAQAAAAAAAQAIADUAAQAAAAAAAgAHAD0AAQAAAAAAAwAIAEQAAQAAAAAABAAIAEwAAQAAAAAABQALAFQAAQAAAAAABgAIAF8AAQAAAAAACgArAGcAAQAAAAAACwATAJIAAwABBAkAAABqAKUAAwABBAkAAQAQAQ8AAwABBAkAAgAOAR8AAwABBAkAAwAQAS0AAwABBAkABAAQAT0AAwABBAkABQAWAU0AAwABBAkABgAQAWMAAwABBAkACgBWAXMAAwABBAkACwAmAclDb3B5cmlnaHQgKEMpIDIwMTcgYnkgb3JpZ2luYWwgYXV0aG9ycyBAIGZvbnRlbGxvLmNvbWZvbnRlbGxvUmVndWxhcmZvbnRlbGxvZm9udGVsbG9WZXJzaW9uIDEuMGZvbnRlbGxvR2VuZXJhdGVkIGJ5IHN2ZzJ0dGYgZnJvbSBGb250ZWxsbyBwcm9qZWN0Lmh0dHA6Ly9mb250ZWxsby5jb20AQwBvAHAAeQByAGkAZwBoAHQAIAAoAEMAKQAgADIAMAAxADcAIABiAHkAIABvAHIAaQBnAGkAbgBhAGwAIABhAHUAdABoAG8AcgBzACAAQAAgAGYAbwBuAHQAZQBsAGwAbwAuAGMAbwBtAGYAbwBuAHQAZQBsAGwAbwBSAGUAZwB1AGwAYQByAGYAbwBuAHQAZQBsAGwAbwBmAG8AbgB0AGUAbABsAG8AVgBlAHIAcwBpAG8AbgAgADEALgAwAGYAbwBuAHQAZQBsAGwAbwBHAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAHMAdgBnADIAdAB0AGYAIABmAHIAbwBtACAARgBvAG4AdABlAGwAbABvACAAcAByAG8AagBlAGMAdAAuAGgAdAB0AHAAOgAvAC8AZgBvAG4AdABlAGwAbABvAC4AYwBvAG0AAAAAAgAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAQIBAwEEAQUBBgEHAAZjYW5jZWwIZG93bi1kaXIIa2V5Ym9hcmQFY2hlY2sFZXJhc2UAAAAAAAEAAf//AA8AAAAAAAAAAAAAAAAAAAAAABgAGAAYABgDUv9pA1L/abAALCCwAFVYRVkgIEu4AA5RS7AGU1pYsDQbsChZYGYgilVYsAIlYbkIAAgAY2MjYhshIbAAWbAAQyNEsgABAENgQi2wASywIGBmLbACLCBkILDAULAEJlqyKAEKQ0VjRVJbWCEjIRuKWCCwUFBYIbBAWRsgsDhQWCGwOFlZILEBCkNFY0VhZLAoUFghsQEKQ0VjRSCwMFBYIbAwWRsgsMBQWCBmIIqKYSCwClBYYBsgsCBQWCGwCmAbILA2UFghsDZgG2BZWVkbsAErWVkjsABQWGVZWS2wAywgRSCwBCVhZCCwBUNQWLAFI0KwBiNCGyEhWbABYC2wBCwjISMhIGSxBWJCILAGI0KxAQpDRWOxAQpDsAFgRWOwAyohILAGQyCKIIqwASuxMAUlsAQmUVhgUBthUllYI1khILBAU1iwASsbIbBAWSOwAFBYZVktsAUssAdDK7IAAgBDYEItsAYssAcjQiMgsAAjQmGwAmJmsAFjsAFgsAUqLbAHLCAgRSCwC0NjuAQAYiCwAFBYsEBgWWawAWNgRLABYC2wCCyyBwsAQ0VCKiGyAAEAQ2BCLbAJLLAAQyNEsgABAENgQi2wCiwgIEUgsAErI7AAQ7AEJWAgRYojYSBkILAgUFghsAAbsDBQWLAgG7BAWVkjsABQWGVZsAMlI2FERLABYC2wCywgIEUgsAErI7AAQ7AEJWAgRYojYSBksCRQWLAAG7BAWSOwAFBYZVmwAyUjYUREsAFgLbAMLCCwACNCsgsKA0VYIRsjIVkqIS2wDSyxAgJFsGRhRC2wDiywAWAgILAMQ0qwAFBYILAMI0JZsA1DSrAAUlggsA0jQlktsA8sILAQYmawAWMguAQAY4ojYbAOQ2AgimAgsA4jQiMtsBAsS1RYsQRkRFkksA1lI3gtsBEsS1FYS1NYsQRkRFkbIVkksBNlI3gtsBIssQAPQ1VYsQ8PQ7ABYUKwDytZsABDsAIlQrEMAiVCsQ0CJUKwARYjILADJVBYsQEAQ2CwBCVCioogiiNhsA4qISOwAWEgiiNhsA4qIRuxAQBDYLACJUKwAiVhsA4qIVmwDENHsA1DR2CwAmIgsABQWLBAYFlmsAFjILALQ2O4BABiILAAUFiwQGBZZrABY2CxAAATI0SwAUOwAD6yAQEBQ2BCLbATLACxAAJFVFiwDyNCIEWwCyNCsAojsAFgQiBgsAFhtRAQAQAOAEJCimCxEgYrsHIrGyJZLbAULLEAEystsBUssQETKy2wFiyxAhMrLbAXLLEDEystsBgssQQTKy2wGSyxBRMrLbAaLLEGEystsBsssQcTKy2wHCyxCBMrLbAdLLEJEystsB4sALANK7EAAkVUWLAPI0IgRbALI0KwCiOwAWBCIGCwAWG1EBABAA4AQkKKYLESBiuwcisbIlktsB8ssQAeKy2wICyxAR4rLbAhLLECHistsCIssQMeKy2wIyyxBB4rLbAkLLEFHistsCUssQYeKy2wJiyxBx4rLbAnLLEIHistsCgssQkeKy2wKSwgPLABYC2wKiwgYLAQYCBDI7ABYEOwAiVhsAFgsCkqIS2wKyywKiuwKiotsCwsICBHICCwC0NjuAQAYiCwAFBYsEBgWWawAWNgI2E4IyCKVVggRyAgsAtDY7gEAGIgsABQWLBAYFlmsAFjYCNhOBshWS2wLSwAsQACRVRYsAEWsCwqsAEVMBsiWS2wLiwAsA0rsQACRVRYsAEWsCwqsAEVMBsiWS2wLywgNbABYC2wMCwAsAFFY7gEAGIgsABQWLBAYFlmsAFjsAErsAtDY7gEAGIgsABQWLBAYFlmsAFjsAErsAAWtAAAAAAARD4jOLEvARUqLbAxLCA8IEcgsAtDY7gEAGIgsABQWLBAYFlmsAFjYLAAQ2E4LbAyLC4XPC2wMywgPCBHILALQ2O4BABiILAAUFiwQGBZZrABY2CwAENhsAFDYzgtsDQssQIAFiUgLiBHsAAjQrACJUmKikcjRyNhIFhiGyFZsAEjQrIzAQEVFCotsDUssAAWsAQlsAQlRyNHI2GwCUMrZYouIyAgPIo4LbA2LLAAFrAEJbAEJSAuRyNHI2EgsAQjQrAJQysgsGBQWCCwQFFYswIgAyAbswImAxpZQkIjILAIQyCKI0cjRyNhI0ZgsARDsAJiILAAUFiwQGBZZrABY2AgsAErIIqKYSCwAkNgZCOwA0NhZFBYsAJDYRuwA0NgWbADJbACYiCwAFBYsEBgWWawAWNhIyAgsAQmI0ZhOBsjsAhDRrACJbAIQ0cjRyNhYCCwBEOwAmIgsABQWLBAYFlmsAFjYCMgsAErI7AEQ2CwASuwBSVhsAUlsAJiILAAUFiwQGBZZrABY7AEJmEgsAQlYGQjsAMlYGRQWCEbIyFZIyAgsAQmI0ZhOFktsDcssAAWICAgsAUmIC5HI0cjYSM8OC2wOCywABYgsAgjQiAgIEYjR7ABKyNhOC2wOSywABawAyWwAiVHI0cjYbAAVFguIDwjIRuwAiWwAiVHI0cjYSCwBSWwBCVHI0cjYbAGJbAFJUmwAiVhuQgACABjYyMgWGIbIVljuAQAYiCwAFBYsEBgWWawAWNgIy4jICA8ijgjIVktsDossAAWILAIQyAuRyNHI2EgYLAgYGawAmIgsABQWLBAYFlmsAFjIyAgPIo4LbA7LCMgLkawAiVGUlggPFkusSsBFCstsDwsIyAuRrACJUZQWCA8WS6xKwEUKy2wPSwjIC5GsAIlRlJYIDxZIyAuRrACJUZQWCA8WS6xKwEUKy2wPiywNSsjIC5GsAIlRlJYIDxZLrErARQrLbA/LLA2K4ogIDywBCNCijgjIC5GsAIlRlJYIDxZLrErARQrsARDLrArKy2wQCywABawBCWwBCYgLkcjRyNhsAlDKyMgPCAuIzixKwEUKy2wQSyxCAQlQrAAFrAEJbAEJSAuRyNHI2EgsAQjQrAJQysgsGBQWCCwQFFYswIgAyAbswImAxpZQkIjIEewBEOwAmIgsABQWLBAYFlmsAFjYCCwASsgiophILACQ2BkI7ADQ2FkUFiwAkNhG7ADQ2BZsAMlsAJiILAAUFiwQGBZZrABY2GwAiVGYTgjIDwjOBshICBGI0ewASsjYTghWbErARQrLbBCLLA1Ky6xKwEUKy2wQyywNishIyAgPLAEI0IjOLErARQrsARDLrArKy2wRCywABUgR7AAI0KyAAEBFRQTLrAxKi2wRSywABUgR7AAI0KyAAEBFRQTLrAxKi2wRiyxAAEUE7AyKi2wRyywNCotsEgssAAWRSMgLiBGiiNhOLErARQrLbBJLLAII0KwSCstsEossgAAQSstsEsssgABQSstsEwssgEAQSstsE0ssgEBQSstsE4ssgAAQistsE8ssgABQistsFAssgEAQistsFEssgEBQistsFIssgAAPistsFMssgABPistsFQssgEAPistsFUssgEBPistsFYssgAAQCstsFcssgABQCstsFgssgEAQCstsFkssgEBQCstsFossgAAQystsFsssgABQystsFwssgEAQystsF0ssgEBQystsF4ssgAAPystsF8ssgABPystsGAssgEAPystsGEssgEBPystsGIssDcrLrErARQrLbBjLLA3K7A7Ky2wZCywNyuwPCstsGUssAAWsDcrsD0rLbBmLLA4Ky6xKwEUKy2wZyywOCuwOystsGgssDgrsDwrLbBpLLA4K7A9Ky2waiywOSsusSsBFCstsGsssDkrsDsrLbBsLLA5K7A8Ky2wbSywOSuwPSstsG4ssDorLrErARQrLbBvLLA6K7A7Ky2wcCywOiuwPCstsHEssDorsD0rLbByLLMJBAIDRVghGyMhWUIrsAhlsAMkUHiwARUwLQBLuADIUlixAQGOWbABuQgACABjcLEABUKyAAEAKrEABUKzCgIBCCqxAAVCsw4AAQgqsQAGQroCwAABAAkqsQAHQroAQAABAAkqsQMARLEkAYhRWLBAiFixA2REsSYBiFFYugiAAAEEQIhjVFixAwBEWVlZWbMMAgEMKrgB/4WwBI2xAgBEAAA=);\n  font-style: normal;\n  font-weight: normal; }\n\n.ui-kb-icon {\n  font-family: "kb-icon";\n  font-style: normal; }\n\n#kb-switch-to-phonetic, #ui-kb-close-btn {\n  color: rgba(0, 0, 0, 0.3);\n  transition: all .3s; }\n  #kb-switch-to-phonetic:hover, #ui-kb-close-btn:hover {\n    color: black; }\n\n#ui-kb-lang-select {\n  position: absolute;\n  margin: 0;\n  padding: 0;\n  top: -13px;\n  z-index: 1;\n  overflow: hidden;\n  list-style: none;\n  max-height: 200px;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  background: #FFF;\n  opacity: 0;\n  border: solid 1px transparent;\n  cursor: pointer; }\n  #ui-kb-lang-select:hover {\n    border: solid 1px #EAEAEA;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n    overflow-y: auto; }\n  #ui-kb-lang-select > li {\n    padding: 5px 12px;\n    transition: all .3s;\n    text-align: left; }\n    #ui-kb-lang-select > li:not(.lang-title):hover {\n      background-color: #F5F5F5; }\n\n#kb-switch-to-phonetic:hover span {\n  opacity: 1; }\n\n#kb-switch-to-phonetic span {\n  position: absolute;\n  white-space: nowrap;\n  right: 2em;\n  background: #333;\n  color: white;\n  padding: 0 .5em;\n  border-radius: 3px;\n  pointer-events: none;\n  transition: all .3s;\n  opacity: 0; }\n\n#kb-switch-container {\n  display: flex;\n  justify-content: flex-end; }\n  #kb-switch-container > button {\n    border: none;\n    font-size: 1.3em;\n    background: white;\n    padding: 0;\n    opacity: .3;\n    transition: all .3s;\n    appearance: none;\n    cursor: pointer;\n    outline: none; }\n    #kb-switch-container > button:hover {\n      opacity: 1; }\n\n.ui-keyboard-toolbar {\n  display: flex;\n  align-items: center;\n  height: 20px;\n  margin: .5em;\n  cursor: move; }\n  .ui-keyboard-toolbar a {\n    cursor: pointer; }\n  .ui-keyboard-toolbar > div {\n    padding: 0 .5em; }\n  .ui-keyboard-toolbar > div:nth-child(2) {\n    flex-grow: 1; }\n  .ui-keyboard-toolbar #ui-kb-lang-title {\n    color: #AAA;\n    font-weight: bold; }\n  .ui-keyboard-toolbar #kb-switch-to-phonetic {\n    padding: 0 .5em; }\n\n.ui-keyboard {\n  width: 100%;\n  max-width: 660px;\n  min-width: 350px;\n  max-height: 230px;\n  padding-bottom: .5em;\n  z-index: 9999;\n  user-select: none;\n  text-align: center;\n  background-color: white;\n  border: solid 1px #EAEAEA;\n  border-radius: 2px;\n  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);\n  top: auto;\n  right: 10px;\n  bottom: 10px;\n  position: fixed;\n  width: 100%;\n  z-index: 99999; }\n  @media all and (max-width: 915px) {\n    .ui-keyboard {\n      max-width: 560px; } }\n  @media all and (max-width: 700px) {\n    .ui-keyboard {\n      width: 350px; } }\n  .ui-keyboard button.ui-keyboard-button {\n    position: relative;\n    display: inline-block;\n    margin: 0 4px 5px 0;\n    padding: 0;\n    border-radius: 5px;\n    width: 2em;\n    height: 2em;\n    vertical-align: top;\n    font-size: 14px;\n    background-color: #FAFAFA;\n    border: solid 1px #DDD; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-space {\n      width: 20em; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-0, .ui-keyboard button.ui-keyboard-button.ui-keyboard-enter {\n      width: 2em; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-0 .ui-keyboard-text, .ui-keyboard button.ui-keyboard-button.ui-keyboard-enter .ui-keyboard-text {\n        font-size: 10px; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-shift {\n      width: 3em; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-shift .ui-keyboard-text {\n        font-size: 10px; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-tab {\n      font-size: 14px;\n      width: 50px; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-tab .ui-keyboard-text {\n        font-size: small; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-accept {\n      width: 4em; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-bksp {\n      width: 3em;\n      text-align: center; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-bksp:before {\n        font-family: \'kb-icon\';\n        content: \'\\e804\';\n        position: relative;\n        font-size: 1.5em; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-bksp > span {\n        display: none; }\n    .ui-keyboard button.ui-keyboard-button.ui-state-hover {\n      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n      color: #333; }\n    .ui-keyboard button.ui-keyboard-button.ui-state-active {\n      background-color: #DDD;\n      border: solid 1px #DDD; }\n    .ui-keyboard button.ui-keyboard-button:active {\n      box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.1) inset; }\n      .ui-keyboard button.ui-keyboard-button:active:after {\n        color: white; }\n    @media all and (max-width: 915px) {\n      .ui-keyboard button.ui-keyboard-button {\n        font-size: 14px; } }\n    @media all and (max-width: 700px) {\n      .ui-keyboard button.ui-keyboard-button {\n        margin: 0 1px 1px 0 !important;\n        border-radius: 3px; } }\n    @media all and (max-width: 700px) {\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-space {\n        width: 8em; } }\n    @media all and (max-width: 700px) {\n      .ui-keyboard button.ui-keyboard-button:not(.ui-keyboard-actionkey) {\n        width: 1.8em;\n        border-radius: 3px; } }\n\n.ui-keyboard-keyset .ui-keyboard-button {\n  position: relative; }\n\n.textcomplete-header {\n  background-color: #fff !important;\n  color: #333 !important; }\n\n.textcomplete-dropdown {\n  background-color: white;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n  overflow: hidden;\n  transition: all .2s;\n  z-index: 999999 !important;\n  list-style: none;\n  padding: 0;\n  margin: 0; }\n  .textcomplete-dropdown li {\n    padding: 5px 10px;\n    min-width: 8em; }\n    .textcomplete-dropdown li:first-child {\n      border-top: none; }\n    .textcomplete-dropdown li:hover, .textcomplete-dropdown li.active {\n      background-color: #3498db;\n      color: white;\n      cursor: default; }\n      .textcomplete-dropdown li:hover a, .textcomplete-dropdown li.active a {\n        cursor: inherit; }\n  .textcomplete-dropdown li.textcomplete-footer:hover {\n    color: #fff;\n    background: #5e2d9e !important; }\n\n[data-value="ZWNJ"] {\n  font-size: 10px;\n  height: 27px; }\n</style>').appendTo(s("head")),s(document).on("click","#kb-switch-to-kb",function(){var e=g;if(!e)return!1;e.trigger("change_mode","keyboard"),e.trigger("reveal_keyboard")}),s.fn.indicInputEditor=function(e){for(var t={},i=0;i<s(this).length;i++){var n=s(this).eq(i);if(!n.attr("data-indic-input-mode")){if("keyboard"!=(t=s.extend({apikey:null,appid:null,orgName:null,domain:1,mode:"keyboard",layout:"hindi",numSuggestions:8,showLangSelect:!1,apiEndpoint:"https://api-gw.revup.reverieinc.com/apiman-gateway/"},e)).mode&&"phonetic"!=t.mode){console.warn("Invalid option parameter value specified for mode. Possible values are `keyboard` and `phonetic`.");continue}if(!t.apikey||!t.appid||!t.orgName){console.warn("Missing option parameters apikey, appid or orgName, which are required for phonetic mode.");continue}n.data(t),n.attr("data-indic-input-mode",t.mode),"phonetic"==t.mode&&h(n,t,e),"keyboard"==t.mode&&p(n,t,e)}}return this.on("change_lang",function(e,t){var i=s(e.target);if(!i.attr("data-indic-input-mode"))return!1;var n=i.data();if(n.layout==t)return console.log("Keyboard lang is already set to "+t),!1;if(n.layout=t,i.data(n),"keyboard"==n.mode){var o=i.getkeyboard();o.options.layout=t,o.redraw()}i.trigger("lang_changed",t)}),this.on("change_mode",function(e,t){var i=s(e.target);if(!i.attr("data-indic-input-mode"))return!1;var n=i.data();if(n.mode==t)return!1;if("keyboard"!=t&&"phonetic"!=t)return console.warn("Invalid mode specified '"+t+"'"),!1;"phonetic"==(n.mode=t)&&(i.getkeyboard().destroy(),h(i,n),i.data(n));"keyboard"==t&&(i.textcomplete("destroy"),p(i,n),i.data(n))}),this.on("reveal_keyboard",function(e){var t=s(e.target);"keyboard"==t.attr("data-indic-input-mode")&&t.getkeyboard().reveal()}),this}}return u}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
